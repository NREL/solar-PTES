/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "CoolProp"
#define SWIG_name        CoolProp

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "CoolProp"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <mex.h>
#include <math.h> /* need this for floor() */

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME void SWIG_Error(int code, const char *msg) {
  mexWarnMsgIdAndTxt(SWIG_ErrorType(code),msg);
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Matlab_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(void *clientdata, swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct {
  void *ptr;
  swig_type_info *type;
  int own;
} SwigPtr;
static SwigPtr *swigPtr=0;
static size_t swigPtrSize=0, swigPtrNumAlloc=0;

/* Linked list of unused elements in swigPtr */
typedef struct SwigUnused {
  size_t ind;
  struct SwigUnused *next;
} SwigUnused;
static SwigUnused *swigUnused=0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(size_t* ind_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!ind_ptr || !type) return 1;
  size_t ind;

  /* If first time encountered, allocate memory (first element null pointer) */
  if (swigPtrNumAlloc==0) {
    swigPtr=(SwigPtr *)malloc(sizeof(SwigPtr));
    if (!swigPtr) return 1;
    swigPtrNumAlloc=swigPtrSize=1;
  }

  if (swigUnused) {
    /* Get a freed object from the stack  */
    ind = swigUnused->ind;
    /* Pop the element from the stack */
    SwigUnused *next = swigUnused->next;
    free(swigUnused);
    swigUnused = next;
  } else {
    /* Add element at the end */
    if (swigPtrSize==swigPtrNumAlloc) {
      /* Increase size of swigPtr */
      SwigPtr *new_mem = (SwigPtr *)realloc(swigPtr, (2*swigPtrNumAlloc)*sizeof(SwigPtr));
      if (!new_mem) return 1;
      swigPtr=new_mem;
      swigPtrNumAlloc *= 2;
    }
    ind = swigPtrSize++;
  }

  /* Increase lock count */
  mexLock();

  /* Initialize object */
  SwigPtr *obj = swigPtr + ind;
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  
  /* Return memory reference and successful return */
  *ind_ptr = ind;
  return 0;
}

/* Get a pointer object
   Returns a SwigPtr* with the object if successful, otherwise 0
 */
SwigPtr* SWIG_Matlab_GetPointer(size_t ind) {
  if (ind==0 || ind>=swigPtrSize) {
    return 0;
  } else {
    return swigPtr+ind;
  }
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(size_t ind) {
  /* Quick return if null pointer? */
  if (ind==0) return 0;

  /* Get pointer */
  SwigPtr* p = SWIG_Matlab_GetPointer(ind);
  if (!p) {
    mexWarnMsgIdAndTxt("SWIG:DeletePointer", "No such element");
    return 0;
  }

  /* Decrease lock count */
  mexUnlock();

  /* Add to list of unused elements */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  SwigUnused *next = swigUnused;
  swigUnused = (SwigUnused *)malloc(sizeof(SwigUnused));
  swigUnused->ind = ind;
  swigUnused->next = next;
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Free allocated memory for pointers */
  if (swigPtr) {
    free(swigPtr);
    swigPtr=0;
    swigPtrSize=swigPtrNumAlloc=0;
  }

  /* Free stack with indices of unused pointers */
  while (swigUnused) {
    SwigUnused *next = swigUnused->next;
    free(swigUnused);
    swigUnused = next;
  }
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  mxArray* pm_command = mxCreateString("_swigCreate");
  mxArray* pm;
  const char * matlab_classname;
  if (type->clientdata) {
    matlab_classname = (const char *)type->clientdata;
  } else {
    /* TODO do we really want this? it's a fall-back for non-package types (e.g pointer-to-float)
       However, it will fail anyway because the mexCallMATLABWithTrap call will fail 
       (as there'd be no package.float matlab-type)
    */
    matlab_classname = type->name+3;    /* FIXME: Hack to dereference pointer */
    mexWarnMsgIdAndTxt("SWIG:NewPointerObj","NewPointerObj problem. clientdata NULL. guessed %s", matlab_classname);
  }

  mxArray* ex = mexCallMATLABWithTrap(1, &pm, 1, &pm_command, matlab_classname);

  /* Hack hack */
  if(ex){
    /* the above failed, so let's just create a SwigRef */
    mxDestroyArray(ex);
    mexWarnMsgIdAndTxt("SWIG:NewPointerObj","NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    ex = mexCallMATLABWithTrap(1, &pm, 0, 0,"SwigRef");
  }

  if(ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mexCallMATLABWithTrap failed for %s",type->name);
  mxDestroyArray(pm_command);

  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */  
  size_t ind;
  if (SWIG_Matlab_NewPointer(&ind, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Pass to class */
  mxArray *pm_ind = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ind) = (uint64_T)ind;
  if(!pm_ind) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mxCreateNumericMatrix failed");
  mxSetProperty(pm, 0, "swigInd", pm_ind);
  mxDestroyArray(pm_ind);
  
  return pm;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ind = mxGetProperty(pm, 0, "swigInd");
  if(!pm_ind || mxGetNumberOfElements(pm_ind) != 1 ||
     mxGetClassID(pm_ind) != mxUINT64_CLASS || mxIsComplex(pm_ind)){
    if(pm_ind) mxDestroyArray(pm_ind);
    return SWIG_ERROR;
  }
  size_t ind = (size_t)(*(uint64_T*)mxGetData(pm_ind));
  mxDestroyArray(pm_ind);

  /* Get pointer object */
  SwigPtr* p = SWIG_Matlab_GetPointer(ind);
  if (!p) {
    mexWarnMsgIdAndTxt("SWIG:ConvertPtrAndOwn", "No such element");
    return 0;
  }

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;
  swig_type_info *p_type = p->type;
  
  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(ind);
  }

  /* No type cast needed */
  if (p_type==type) return SWIG_OK;

  /* Check if type conversion is possible */
  swig_cast_info *tc = SWIG_TypeCheckStruct(p_type, type);
  if (!tc) return SWIG_ERROR;

  /* Do type-cast (but only if non-zero pointer, otherwise it's trivial) */
  if (ptr) {
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
    if (newmemory == SWIG_CAST_NEW_MEMORY) {
      if (own) {
        *own = *own | SWIG_CAST_NEW_MEMORY;
      } else {
        /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
        return SWIG_ERROR;
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata) {
  swig_module_info *pointer = 0;
  return pointer;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(void *clientdata, swig_module_info *pointer) {
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CoolPropDbl swig_types[0]
#define SWIGTYPE_p_CoolProp__AbstractState swig_types[1]
#define SWIGTYPE_p_CoolProp__Configuration swig_types[2]
#define SWIGTYPE_p_CoolProp__ConfigurationItem swig_types[3]
#define SWIGTYPE_p_CoolProp__CriticalState swig_types[4]
#define SWIGTYPE_p_CoolProp__GuessesStructure swig_types[5]
#define SWIGTYPE_p_CoolProp__PhaseEnvelopeData swig_types[6]
#define SWIGTYPE_p_CoolProp__SimpleState swig_types[7]
#define SWIGTYPE_p_CoolProp__SsatSimpleState swig_types[8]
#define SWIGTYPE_p_CoolProp__parameters swig_types[9]
#define SWIGTYPE_p_allocator_type swig_types[10]
#define SWIGTYPE_p_bool swig_types[11]
#define SWIGTYPE_p_char swig_types[12]
#define SWIGTYPE_p_difference_type swig_types[13]
#define SWIGTYPE_p_double swig_types[14]
#define SWIGTYPE_p_size_type swig_types[15]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[16]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[17]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[18]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[19]
#define SWIGTYPE_p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t swig_types[20]
#define SWIGTYPE_p_std__string swig_types[21]
#define SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t swig_types[22]
#define SWIGTYPE_p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t swig_types[27]
#define SWIGTYPE_p_swig__MatlabSwigIterator swig_types[28]
#define SWIGTYPE_p_value_type swig_types[29]
static swig_type_info *swig_types[31];
static swig_module_info swig_module = {swig_types, 30, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030005 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct MatlabSwigIterator {
  private:
    mxArray* _seq;

  protected:
    MatlabSwigIterator(mxArray* seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~MatlabSwigIterator() {}

    virtual mxArray* value() const = 0;

    virtual MatlabSwigIterator *incr(size_t n = 1) = 0;

    virtual MatlabSwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    virtual ptrdiff_t distance(const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const MatlabSwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    virtual MatlabSwigIterator *copy() const = 0;

    mxArray* next()
    {
      mxArray* obj = value();
      incr();
      return obj;
    }

    mxArray* previous()
    {
      decr();
      return value();
    }

    MatlabSwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const MatlabSwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const MatlabSwigIterator& x) const
    {
      return ! operator==(x);
    }

    MatlabSwigIterator* operator ++ () {
      incr();
      return this;
    }

    MatlabSwigIterator* operator -- () {
      decr();
      return this;
    }
      
    MatlabSwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    MatlabSwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const MatlabSwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::MatlabSwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_size_t (mxArray* obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (mxArray* obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
// Traits that provides the from method
  template <class Type> struct traits_from_ptr {
    static mxArray* from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static mxArray* from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static mxArray* from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static mxArray* from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline mxArray* from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline mxArray* from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

    // Traits that provides the asval/as/check method
  template <class Type>
  struct traits_asptr {   
    static int asptr(mxArray* pm, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(pm, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(mxArray* pm, Type **vptr) {
    return traits_asptr<Type>::asptr(pm, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(mxArray* pm, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(pm, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(mxArray* pm, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(pm,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(pm, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(mxArray* pm, Type *val) {
    return traits_asval<Type>::asval(pm, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type v;
      int res = asval(pm, &v);
      if (mxGetClassID(pm) == mxUNKNOWN_CLASS || !SWIG_IsOK(res)) {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(mxArray* pm, bool throw_error) {
      Type *v = 0;      
      int res = traits_asptr<Type>::asptr(pm, &v);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(mxArray* pm, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(pm, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(mxArray* obj) {
      int res = asval(obj, (Type *)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(mxArray* obj) {
      int res = asptr(obj, (Type **)(0));
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(mxArray* obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {













}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class MatlabSwigIterator_T :  public MatlabSwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef MatlabSwigIterator_T<out_iterator> self_type;

    MatlabSwigIterator_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const MatlabSwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef mxArray* result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorOpen_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;
    typedef MatlabSwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorOpen_T(out_iterator curr, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    mxArray* value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class MatlabSwigIteratorClosed_T :  public MatlabSwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef MatlabSwigIterator_T<out_iterator>  base;    
    typedef MatlabSwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    MatlabSwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, mxArray* seq)
      : MatlabSwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    mxArray* value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    MatlabSwigIterator *copy() const
    {
      return new self_type(*this);
    }

    MatlabSwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    MatlabSwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline MatlabSwigIterator*
  make_output_iterator(const OutIter& current, mxArray* seq = 0 /* KT mxArray()*/)
  {
    return new MatlabSwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
    struct MatlabSequence_Ref // * matlab can't support these, because of how assignment works
  {
    MatlabSequence_Ref(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      //      swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, _index);
      mxArray* item; // * todo
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!Matlab_Error_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Matlab_AddErrorMsg(msg);
	SWIG_Matlab_AddErrorMsg(e.what());
	throw;
      }
    }

    MatlabSequence_Ref& operator=(const T& v)
    {
      //      MatlabSequence_SetItem(_seq, _index, swig::from<T>(v));
      // * todo
      return *this;
    }

  private:
    mxArray* _seq;
    int _index;
  };

  template <class T>
  struct MatlabSequence_ArrowProxy
  {
    MatlabSequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct MatlabSequence_InputIterator
  {
    typedef MatlabSequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    MatlabSequence_InputIterator()
    {
    }

    MatlabSequence_InputIterator(mxArray* const seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    MatlabSequence_ArrowProxy<T>
    operator->() const {
      return MatlabSequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    mxArray* _seq;
    difference_type _index;
  };

  template <class T>
  struct MatlabSequence_Cont
  {
    typedef MatlabSequence_Ref<T> reference;
    typedef const MatlabSequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef MatlabSequence_InputIterator<T, reference> iterator;
    typedef MatlabSequence_InputIterator<T, const_reference> const_iterator;

    MatlabSequence_Cont(mxArray* const seq) : _seq(seq)
    {
      // * assert that we have map type etc.
      /*
      if (!MatlabSequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
      */
    }

    ~MatlabSequence_Cont()
    {
    }

    size_type size() const
    {
      //      return static_cast<size_type>(MatlabSequence_Size(_seq));
      return 0; // * todo
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	//	swig::SwigVar_PyObject item = MatlabSequence_GetItem(_seq, i);
	mxArray* item; // * todo
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    mxArray* _seq;
  };

}


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(mxArray* obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static mxArray* from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


namespace swig {
  template <class Matlabseq, class Seq>
  inline void
  assign(const Matlabseq& matlabseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
    typedef typename Matlabseq::value_type value_type;
    typename Matlabseq::const_iterator it = matlabseq.begin();
    for (;it != matlabseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
#else
    seq->assign(matlabseq.begin(), matlabseq.end());
#endif
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(mxArray* obj, sequence **seq) {
      if (obj && mxGetClassID(obj)==mxCELL_CLASS && mxGetM(obj)==1) {
        // TODO
        SWIG_Error(SWIG_SystemError, "Not implemented");
        return SWIG_ERROR;
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static mxArray* from(const sequence& seq) {







      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	mxArray* c = mxCreateCellMatrix(size,1);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  mxSetCell(c, i, swig::from<value_type>(*it));
	}
	return c;
      } else {
	SWIG_Error(SWIG_RuntimeError, "swig overflow error: sequence size not valid in matlab");
	return 0;
      }
      return 0;
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(mxArray* obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static mxArray* from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__paren(std::vector< double > *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg__paren_asgn(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type x){
      self->push_back(x);
    }

  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< double,std::allocator< double > >, std::allocator< std::vector< double,std::allocator< double > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< double,std::allocator< double > >" "," "std::allocator< std::vector< double,std::allocator< double > > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__paren(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__paren_asgn(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator first,std::vector< std::vector< double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::size_type n,std::vector< std::vector< double > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int *alloc)
{
  if(!mxIsChar(pm) || mxGetM(pm)!=1) return SWIG_TypeError;
  size_t len=mxGetN(pm);
  static char buf[256];
  int flag = mxGetString(pm,buf,(mwSize)sizeof(buf));
  if(flag) return SWIG_TypeError;

  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), buf, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = buf;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsPtr_std_string (mxArray* obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (mxArray* obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE mxArray*
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
   mwSize dims[2] = {1,(mwSize)size};
   mxArray* ret = mxCreateCharArray((mwSize)2,dims);
   if(!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize","mxCreateCharArray failed");
   mxChar *ret_data = (mxChar *)mxGetData(ret);
   int i;
   for(i=0; i<size; ++i) ret_data[i] = carray[i];
   return ret;  
}


SWIGINTERNINLINE mxArray*
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(mxArray* obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static mxArray* from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__paren(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__paren_asgn(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< std::string,std::allocator< std::string > >, std::allocator< std::vector< std::string,std::allocator< std::string > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::string,std::allocator< std::string > >" "," "std::allocator< std::vector< std::string,std::allocator< std::string > > >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< std::vector< std::string > >::value_type std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__pop(std::vector< std::vector< std::string > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< std::string > >::value_type std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__paren(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__paren_asgn(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::difference_type i,std::vector< std::vector< std::string > >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__append(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::value_type x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator first,std::vector< std::vector< std::string > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< std::string > >::iterator std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_0(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos,std::vector< std::vector< std::string > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_1(std::vector< std::vector< std::string > > *self,std::vector< std::vector< std::string > >::iterator pos,std::vector< std::vector< std::string > >::size_type n,std::vector< std::vector< std::string > >::value_type const &x){ self->insert(pos, n, x); }

#include "DataStructures.h"
#include "AbstractState.h"
#include "CoolProp.h"
#include "PhaseEnvelope.h"
#define SWIG
#include "Configuration.h"
#undef SWIG
#include "HumidAirProp.h"


SWIGINTERN int
SWIG_AsVal_bool (mxArray* pm, bool *val)
{
   if(!mxIsLogicalScalar(pm)) return SWIG_TypeError;
   if (val) *val = mxIsLogicalScalarTrue(pm);
   return SWIG_OK;
}


SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}




int _wrap_delete_MatlabSwigIterator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_MatlabSwigIterator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatlabSwigIterator" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_value (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_value",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_value" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)((swig::MatlabSwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_incr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_incr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_incr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_incr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_incr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_decr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_decr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_decr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatlabSwigIterator_decr__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_decr__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_MatlabSwigIterator_distance (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_distance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_distance" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_distance" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = ((swig::MatlabSwigIterator const *)arg1)->distance((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG::RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_equal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_equal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_equal" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_equal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  try {
    result = (bool)((swig::MatlabSwigIterator const *)arg1)->equal((swig::MatlabSwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    mexErrMsgIdAndTxt("SWIG::RuntimeError", "C++ side threw an exception of type " "std::invalid_argument"); SWIG_fail;
  }
  
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_copy (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_copy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_copy" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->copy();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_next (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_next",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_next" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_previous (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  mxArray *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_previous",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_previous" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  try {
    result = (mxArray *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = result;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_advance (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_advance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_advance" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_isequal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_isequal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_isequal" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_isequal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_isequal" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator ==((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_ne (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_ne",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_ne" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_ne" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = (bool)((swig::MatlabSwigIterator const *)arg1)->operator !=((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOincr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOincr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOincr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator ++();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_TODOdecr (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_TODOdecr",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_TODOdecr" "', argument " "1"" of type '" "swig::MatlabSwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  result = (swig::MatlabSwigIterator *)(arg1)->operator --();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_plus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_plus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  swig::MatlabSwigIterator *result = 0 ;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::MatlabSwigIterator *)((swig::MatlabSwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      SWIG_Error(SWIG_RuntimeError,"stop_iteration exception"); /* KT TODO */
      SWIG_fail;
    }
  }
  
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__MatlabSwigIterator, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  swig::MatlabSwigIterator *arg1 = (swig::MatlabSwigIterator *) 0 ;
  swig::MatlabSwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  ptrdiff_t result;
  
  if (!SWIG_check_num_args("MatlabSwigIterator_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_swig__MatlabSwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatlabSwigIterator_minus" "', argument " "1"" of type '" "swig::MatlabSwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::MatlabSwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_swig__MatlabSwigIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatlabSwigIterator_minus" "', argument " "2"" of type '" "swig::MatlabSwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::MatlabSwigIterator * >(argp2);
  result = ((swig::MatlabSwigIterator const *)arg1)->operator -((swig::MatlabSwigIterator const &)*arg2);
  _out = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_MatlabSwigIterator_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__MatlabSwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatlabSwigIterator_minus__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_DoubleVector_pop (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::value_type result;
  
  if (!SWIG_check_num_args("DoubleVector_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< double >::value_type result;
  
  if (!SWIG_check_num_args("DoubleVector_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_paren" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_paren" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__paren(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_paren_asgn (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_paren_asgn",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_paren_asgn" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_paren_asgn" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_paren_asgn" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  arg3 = static_cast< std::vector< double >::value_type >(val3);
  try {
    std_vector_Sl_double_Sg__paren_asgn(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_append (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  arg2 = static_cast< std::vector< double >::value_type >(val2);
  std_vector_Sl_double_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DoubleVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< double > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DoubleVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< double > *)new std::vector< double >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DoubleVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< double > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_DoubleVector_empty (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("DoubleVector_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::size_type result;
  
  if (!SWIG_check_num_args("DoubleVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_swap (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_get_allocator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!SWIG_check_num_args("DoubleVector_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_begin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_end (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_rbegin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_rend (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::reverse_iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DoubleVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< double > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_pop_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_erase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< double >::iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_erase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< double >::iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_erase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_new_DoubleVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< double > *result = 0 ;
  
  if (!SWIG_check_num_args("new_DoubleVector",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_DoubleVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_DoubleVector_push_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_front (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("DoubleVector_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  _out = SWIG_From_double(static_cast< double >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("DoubleVector_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  _out = SWIG_From_double(static_cast< double >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_assign (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_DoubleVector_insert__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  std::vector< double >::iterator result;
  
  if (!SWIG_check_num_args("DoubleVector_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_insert__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_insert (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_DoubleVector_reserve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("DoubleVector_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_DoubleVector_capacity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double >::size_type result;
  
  if (!SWIG_check_num_args("DoubleVector_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_DoubleVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_DoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_pop (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::value_type result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::value_type result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_paren" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_paren" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__paren(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_paren_asgn (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_paren_asgn",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_paren_asgn" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_paren_asgn" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VectorOfDoubleVector_paren_asgn" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__paren_asgn(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_append (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VectorOfDoubleVector_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfDoubleVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfDoubleVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfDoubleVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfDoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorOfDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorOfDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_VectorOfDoubleVector_empty (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::size_type result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_swap (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorOfDoubleVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_get_allocator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(static_cast< const std::vector< std::vector< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_begin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_end (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_end" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_rbegin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_rend (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfDoubleVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfDoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorOfDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_pop_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_erase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< std::vector< double > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_erase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< std::vector< double > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_erase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorOfDoubleVector_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorOfDoubleVector_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_new_VectorOfDoubleVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfDoubleVector",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorOfDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorOfDoubleVector" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorOfDoubleVector" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_new_VectorOfDoubleVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_VectorOfDoubleVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorOfDoubleVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorOfDoubleVector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorOfDoubleVector__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfDoubleVector_push_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorOfDoubleVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_VectorOfDoubleVector_front (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_assign (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfDoubleVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfDoubleVector_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfDoubleVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfDoubleVector_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorOfDoubleVector_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorOfDoubleVector_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfDoubleVector_insert__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< double > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfDoubleVector_insert__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::size_type arg3 ;
  std::vector< std::vector< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfDoubleVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorOfDoubleVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::size_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorOfDoubleVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfDoubleVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_VectorOfDoubleVector_insert (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorOfDoubleVector_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorOfDoubleVector_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfDoubleVector_reserve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfDoubleVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfDoubleVector_capacity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double > >::size_type result;
  
  if (!SWIG_check_num_args("VectorOfDoubleVector_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfDoubleVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_VectorOfDoubleVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_VectorOfDoubleVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorOfDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_pop (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type result;
  
  if (!SWIG_check_num_args("StringVector_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type result;
  
  if (!SWIG_check_num_args("StringVector_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_paren" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_paren" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = std_vector_Sl_std_string_Sg__paren(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_paren_asgn (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_paren_asgn",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_paren_asgn" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_paren_asgn" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_paren_asgn" "', argument " "3"" of type '" "std::vector< std::string >::value_type""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__paren_asgn(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_append (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_StringVector_empty (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("StringVector_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_check_num_args("StringVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_swap (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_get_allocator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("StringVector_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_begin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_end (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_rbegin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_check_num_args("StringVector_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_rend (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::reverse_iterator result;
  
  if (!SWIG_check_num_args("StringVector_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_StringVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_pop_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_erase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_new_StringVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string > *result = 0 ;
  
  if (!SWIG_check_num_args("new_StringVector",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_new_StringVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_StringVector_push_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_StringVector_front (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("StringVector_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("StringVector_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_assign (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_StringVector_insert__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::string >::iterator result;
  
  if (!SWIG_check_num_args("StringVector_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_StringVector_insert__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_StringVector_insert (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_StringVector_reserve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("StringVector_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_StringVector_capacity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string >::size_type result;
  
  if (!SWIG_check_num_args("StringVector_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_StringVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_StringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_pop (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::value_type result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_pop",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_paren (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::value_type result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_paren",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_paren" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_paren" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  try {
    result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__paren(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_paren_asgn (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::difference_type arg2 ;
  std::vector< std::vector< std::string > >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_paren_asgn",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_paren_asgn" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_paren_asgn" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::difference_type >(val2);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VectorOfStringVector_paren_asgn" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__paren_asgn(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_append (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_append",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_append" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VectorOfStringVector_append" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__append(arg1,arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfStringVector__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfStringVector",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfStringVector__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string,std::allocator< std::string > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfStringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *ptr = (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorOfStringVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorOfStringVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >((std::vector< std::vector< std::string,std::allocator< std::string > > > const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_VectorOfStringVector_empty (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_empty",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (bool)((std::vector< std::vector< std::string > > const *)arg1)->empty();
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::size_type result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_size" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->size();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  (arg1)->clear();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_swap (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string,std::allocator< std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_swap",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorOfStringVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::string,std::allocator< std::string > > > * >(argp2);
  (arg1)->swap(*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_get_allocator (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::allocator< std::vector< std::string,std::allocator< std::string > > > > result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_get_allocator",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->get_allocator();
  _out = SWIG_NewPointerObj((new std::vector< std::vector< std::string > >::allocator_type(static_cast< const std::vector< std::vector< std::string > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_begin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_begin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->begin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_end (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_end",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_end" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->end();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_rbegin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::reverse_iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_rbegin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->rbegin();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_rend (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::reverse_iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_rend",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (arg1)->rend();
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::reverse_iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_VectorOfStringVector__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfStringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorOfStringVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::string > >::size_type >(val1);
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_pop_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_pop_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  (arg1)->pop_back();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_resize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_erase__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_erase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_0(arg1,arg2);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_erase__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  swig::MatlabSwigIterator *iter3 = 0 ;
  int res3 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_erase",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter3), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_erase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorOfStringVector_erase__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::MatlabSwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorOfStringVector_erase__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_new_VectorOfStringVector__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > >::size_type arg1 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorOfStringVector",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorOfStringVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::string > >::size_type >(val1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorOfStringVector" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorOfStringVector" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1,(std::vector< std::vector< std::string > >::value_type const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_new_VectorOfStringVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_VectorOfStringVector__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorOfStringVector__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorOfStringVector__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorOfStringVector__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfStringVector_push_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_push_back",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorOfStringVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< std::string > >::value_type const &)*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_VectorOfStringVector_front (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VectorOfStringVector_front",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_front" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (std::vector< std::vector< std::string > >::value_type *) &((std::vector< std::vector< std::string > > const *)arg1)->front();
  _out = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_back (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  if (!SWIG_check_num_args("VectorOfStringVector_back",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_back" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = (std::vector< std::vector< std::string > >::value_type *) &((std::vector< std::vector< std::string > > const *)arg1)->back();
  _out = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_assign (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_assign",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfStringVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< std::string > >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfStringVector_resize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfStringVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< std::string > >::value_type const &)*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfStringVector_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorOfStringVector_resize__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorOfStringVector_resize__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfStringVector_insert__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::iterator result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_insert",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorOfStringVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  _out = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::string > >::iterator & >(result)),
    swig::MatlabSwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_VectorOfStringVector_insert__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::iterator arg2 ;
  std::vector< std::vector< std::string > >::size_type arg3 ;
  std::vector< std::vector< std::string > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::MatlabSwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_insert",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter2), swig::MatlabSwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
  } else {
    swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorOfStringVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorOfStringVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::string > >::size_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorOfStringVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorOfStringVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::string > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_VectorOfStringVector_insert (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorOfStringVector_insert__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::MatlabSwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::MatlabSwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::MatlabSwigIterator_T<std::vector< std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorOfStringVector_insert__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_VectorOfStringVector_reserve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorOfStringVector_reserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorOfStringVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::string > >::size_type >(val2);
  (arg1)->reserve(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_VectorOfStringVector_capacity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< std::string > >::size_type result;
  
  if (!SWIG_check_num_args("VectorOfStringVector_capacity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorOfStringVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  result = ((std::vector< std::vector< std::string > > const *)arg1)->capacity();
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_VectorOfStringVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_VectorOfStringVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorOfStringVector" "', argument " "1"" of type '" "std::vector< std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::string > > * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_rhomolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_rhomolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_rhomolar_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_rhomolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rhomolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_rhomolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_rhomolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_rhomolar_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->rhomolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_T_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_T_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_T_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_T_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->T = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_T_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_T_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_T_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->T);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_p_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_p_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_p_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_p_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->p = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_p_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_p_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_p_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->p);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_hmolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_hmolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_hmolar_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_hmolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->hmolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_hmolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_hmolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_hmolar_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->hmolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_smolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_smolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_smolar_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_smolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->smolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_smolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_smolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_smolar_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->smolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_umolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_umolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_umolar_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_umolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->umolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_umolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_umolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_umolar_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->umolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_Q_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_Q_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_Q_set" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_Q_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Q = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_Q_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SimpleState_Q_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_Q_get" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  result = (double) ((arg1)->Q);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SimpleState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::SimpleState *result = 0 ;
  
  if (!SWIG_check_num_args("new_SimpleState",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::SimpleState *)new CoolProp::SimpleState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__SimpleState, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_fill (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SimpleState_fill",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_fill" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleState_fill" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->fill(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SimpleState_is_valid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("SimpleState_is_valid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleState_is_valid" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  {
    try {
      result = (bool)(arg1)->is_valid();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SimpleState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_SimpleState",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SimpleState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleState" "', argument " "1"" of type '" "CoolProp::SimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SimpleState * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CriticalState_stable_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("CriticalState_stable_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__CriticalState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CriticalState_stable_set" "', argument " "1"" of type '" "CoolProp::CriticalState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::CriticalState * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CriticalState_stable_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->stable = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_CriticalState_stable_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("CriticalState_stable_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__CriticalState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CriticalState_stable_get" "', argument " "1"" of type '" "CoolProp::CriticalState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::CriticalState * >(argp1);
  result = (bool) ((arg1)->stable);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_CriticalState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::CriticalState *result = 0 ;
  
  if (!SWIG_check_num_args("new_CriticalState",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::CriticalState *)new CoolProp::CriticalState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__CriticalState, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_CriticalState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_CriticalState",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__CriticalState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CriticalState" "', argument " "1"" of type '" "CoolProp::CriticalState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::CriticalState * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SsatSimpleState_exists_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("SsatSimpleState_exists_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SsatSimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SsatSimpleState_exists_set" "', argument " "1"" of type '" "CoolProp::SsatSimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SsatSimpleState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SsatSimpleState_exists_set" "', argument " "2"" of type '" "CoolProp::SsatSimpleState::SsatSimpleStateEnum""'");
  } 
  arg2 = static_cast< CoolProp::SsatSimpleState::SsatSimpleStateEnum >(val2);
  if (arg1) (arg1)->exists = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_SsatSimpleState_exists_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  
  if (!SWIG_check_num_args("SsatSimpleState_exists_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SsatSimpleState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SsatSimpleState_exists_get" "', argument " "1"" of type '" "CoolProp::SsatSimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SsatSimpleState * >(argp1);
  result = (CoolProp::SsatSimpleState::SsatSimpleStateEnum) ((arg1)->exists);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_SsatSimpleState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::SsatSimpleState *result = 0 ;
  
  if (!SWIG_check_num_args("new_SsatSimpleState",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::SsatSimpleState *)new CoolProp::SsatSimpleState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__SsatSimpleState, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_SsatSimpleState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_SsatSimpleState",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__SsatSimpleState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SsatSimpleState" "', argument " "1"" of type '" "CoolProp::SsatSimpleState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::SsatSimpleState * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_parameter_information (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_parameter_information",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_parameter_information" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_parameter_information" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_parameter_information" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = CoolProp::get_parameter_information(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_get_parameter_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::parameters result;
  
  if (!SWIG_check_num_args("get_parameter_index",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_parameter_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_parameter_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (CoolProp::parameters)CoolProp::get_parameter_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_get_phase_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::phases result;
  
  if (!SWIG_check_num_args("get_phase_index",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_phase_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_phase_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (CoolProp::phases)CoolProp::get_phase_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_is_trivial_parameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_trivial_parameter",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_trivial_parameter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (bool)CoolProp::is_trivial_parameter(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_is_valid_parameter (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_valid_parameter",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_parameter" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_parameter" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "is_valid_parameter" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_parameter" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  arg2 = reinterpret_cast< CoolProp::parameters * >(argp2);
  {
    try {
      result = (bool)CoolProp::is_valid_parameter((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_is_valid_first_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_valid_first_derivative",argc,4,4,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_first_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "is_valid_first_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  arg2 = reinterpret_cast< CoolProp::parameters * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "is_valid_first_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  arg3 = reinterpret_cast< CoolProp::parameters * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "is_valid_first_derivative" "', argument " "4"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_derivative" "', argument " "4"" of type '" "CoolProp::parameters &""'"); 
  }
  arg4 = reinterpret_cast< CoolProp::parameters * >(argp4);
  {
    try {
      result = (bool)CoolProp::is_valid_first_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_is_valid_first_saturation_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_valid_first_saturation_derivative",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_first_saturation_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_saturation_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "is_valid_first_saturation_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_saturation_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  arg2 = reinterpret_cast< CoolProp::parameters * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "is_valid_first_saturation_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_first_saturation_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  arg3 = reinterpret_cast< CoolProp::parameters * >(argp3);
  {
    try {
      result = (bool)CoolProp::is_valid_first_saturation_derivative((std::string const &)*arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_is_valid_second_derivative (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  CoolProp::parameters *arg5 = 0 ;
  CoolProp::parameters *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_valid_second_derivative",argc,6,6,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_second_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "is_valid_second_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  arg2 = reinterpret_cast< CoolProp::parameters * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "is_valid_second_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  arg3 = reinterpret_cast< CoolProp::parameters * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "is_valid_second_derivative" "', argument " "4"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "4"" of type '" "CoolProp::parameters &""'"); 
  }
  arg4 = reinterpret_cast< CoolProp::parameters * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "is_valid_second_derivative" "', argument " "5"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "5"" of type '" "CoolProp::parameters &""'"); 
  }
  arg5 = reinterpret_cast< CoolProp::parameters * >(argp5);
  res6 = SWIG_ConvertPtr(argv[5], &argp6, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "is_valid_second_derivative" "', argument " "6"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_second_derivative" "', argument " "6"" of type '" "CoolProp::parameters &""'"); 
  }
  arg6 = reinterpret_cast< CoolProp::parameters * >(argp6);
  {
    try {
      result = (bool)CoolProp::is_valid_second_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_get_csv_parameter_list (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_csv_parameter_list",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = CoolProp::get_csv_parameter_list();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_match_pair (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::parameters arg1 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  bool *arg5 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("match_pair",argc,5,5,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "match_pair" "', argument " "1"" of type '" "CoolProp::parameters""'");
  } 
  arg1 = static_cast< CoolProp::parameters >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "match_pair" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "match_pair" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "match_pair" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "match_pair" "', argument " "5"" of type '" "bool &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "match_pair" "', argument " "5"" of type '" "bool &""'"); 
  }
  arg5 = reinterpret_cast< bool * >(argp5);
  {
    try {
      result = (bool)CoolProp::match_pair(arg1,arg2,arg3,arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_input_pair_index (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::input_pairs result;
  
  if (!SWIG_check_num_args("get_input_pair_index",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_input_pair_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_input_pair_index" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (CoolProp::input_pairs)CoolProp::get_input_pair_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_get_input_pair_short_desc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::input_pairs arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("get_input_pair_short_desc",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_input_pair_short_desc" "', argument " "1"" of type '" "CoolProp::input_pairs""'");
  } 
  arg1 = static_cast< CoolProp::input_pairs >(val1);
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_short_desc(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_input_pair_long_desc (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::input_pairs arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::string *result = 0 ;
  
  if (!SWIG_check_num_args("get_input_pair_long_desc",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_input_pair_long_desc" "', argument " "1"" of type '" "CoolProp::input_pairs""'");
  } 
  arg1 = static_cast< CoolProp::input_pairs >(val1);
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_long_desc(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(*result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_split_input_pair (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::input_pairs arg1 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("split_input_pair",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "split_input_pair" "', argument " "1"" of type '" "CoolProp::input_pairs""'");
  } 
  arg1 = static_cast< CoolProp::input_pairs >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "split_input_pair" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split_input_pair" "', argument " "2"" of type '" "CoolProp::parameters &""'"); 
  }
  arg2 = reinterpret_cast< CoolProp::parameters * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolProp__parameters,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "split_input_pair" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split_input_pair" "', argument " "3"" of type '" "CoolProp::parameters &""'"); 
  }
  arg3 = reinterpret_cast< CoolProp::parameters * >(argp3);
  {
    try {
      CoolProp::split_input_pair(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_mixture_binary_pair_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_mixture_binary_pair_data",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_mixture_binary_pair_data" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_mixture_binary_pair_data" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_mixture_binary_pair_data" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_mixture_binary_pair_data" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_mixture_binary_pair_data" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_mixture_binary_pair_data" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = CoolProp::get_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_set_mixture_binary_pair_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_mixture_binary_pair_data",argc,4,4,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_mixture_binary_pair_data" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_mixture_binary_pair_data" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_mixture_binary_pair_data" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_mixture_binary_pair_data" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_mixture_binary_pair_data" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_mixture_binary_pair_data" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_mixture_binary_pair_data" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      CoolProp::set_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_GuessesStructure_T_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_T_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_T_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_T_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->T = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_T_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_T_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_T_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->T);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_p_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_p_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_p_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_p_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->p = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_p_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_p_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_p_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->p);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_rhomolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rhomolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->rhomolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_hmolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_hmolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_hmolar_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_hmolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->hmolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_hmolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_hmolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_hmolar_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->hmolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_smolar_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_smolar_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_smolar_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_smolar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->smolar = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_smolar_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_smolar_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_smolar_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->smolar);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_liq_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_rhomolar_liq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rhomolar_liq = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_liq_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->rhomolar_liq);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_vap_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuessesStructure_rhomolar_vap_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->rhomolar_vap = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_rhomolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("GuessesStructure_rhomolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_rhomolar_vap_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (double) ((arg1)->rhomolar_vap);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_x_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_x_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_x_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GuessesStructure_x_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_x_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("GuessesStructure_x_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_x_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->x);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_y_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("GuessesStructure_y_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_y_set" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GuessesStructure_y_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->y = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_GuessesStructure_y_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("GuessesStructure_y_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuessesStructure_y_get" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->y);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_GuessesStructure (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::GuessesStructure *result = 0 ;
  
  if (!SWIG_check_num_args("new_GuessesStructure",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::GuessesStructure *)new CoolProp::GuessesStructure();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__GuessesStructure, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_GuessesStructure (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_GuessesStructure",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__GuessesStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GuessesStructure" "', argument " "1"" of type '" "CoolProp::GuessesStructure *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::GuessesStructure * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_AbstractState (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_AbstractState",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbstractState" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_factory__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::AbstractState *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_factory",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_factory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_factory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_factory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_factory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_factory__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::AbstractState *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_factory",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_factory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_factory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_factory" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_factory" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_factory (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AbstractState_factory__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AbstractState_factory__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_AbstractState_set_T (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_T",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_T" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_set_T" "', argument " "2"" of type '" "CoolPropDbl""'");
  } 
  arg2 = static_cast< CoolPropDbl >(val2);
  {
    try {
      (arg1)->set_T(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_backend_name (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AbstractState_backend_name",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_backend_name" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->backend_name();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_using_mole_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_using_mole_fractions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_using_mole_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->using_mole_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_using_mass_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_using_mass_fractions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_using_mass_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->using_mass_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_using_volu_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_using_volu_fractions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_using_volu_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->using_volu_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_set_mole_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_mole_fractions",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_mole_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_set_mole_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_mole_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_mole_fractions((std::vector< double,std::allocator< double > > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_set_mass_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_mass_fractions",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_mass_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_set_mass_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_mass_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_mass_fractions((std::vector< double,std::allocator< double > > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_set_volu_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_volu_fractions",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_volu_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res2 = swig::asptr(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_set_volu_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_volu_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_volu_fractions((std::vector< double,std::allocator< double > > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_mole_fractions_liquid (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_check_num_args("AbstractState_mole_fractions_liquid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_mole_fractions_liquid" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->mole_fractions_liquid_double();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_mole_fractions_vapor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_check_num_args("AbstractState_mole_fractions_vapor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_mole_fractions_vapor" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->mole_fractions_vapor_double();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_get_mole_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_get_mole_fractions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_mole_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *) &(arg1)->get_mole_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_get_mass_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > > result;
  
  if (!SWIG_check_num_args("AbstractState_get_mass_fractions",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_mass_fractions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->get_mass_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj((new std::vector< CoolPropDbl,std::allocator< CoolPropDbl > >(static_cast< const std::vector< CoolPropDbl,std::allocator< CoolPropDbl > >& >(result))), SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_update (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_update",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_update" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_update" "', argument " "2"" of type '" "CoolProp::input_pairs""'");
  } 
  arg2 = static_cast< CoolProp::input_pairs >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_update" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_update" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->update(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_update_with_guesses (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  CoolProp::GuessesStructure *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_update_with_guesses",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_update_with_guesses" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_update_with_guesses" "', argument " "2"" of type '" "CoolProp::input_pairs""'");
  } 
  arg2 = static_cast< CoolProp::input_pairs >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_update_with_guesses" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_update_with_guesses" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_CoolProp__GuessesStructure,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AbstractState_update_with_guesses" "', argument " "5"" of type '" "CoolProp::GuessesStructure const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_update_with_guesses" "', argument " "5"" of type '" "CoolProp::GuessesStructure const &""'"); 
  }
  arg5 = reinterpret_cast< CoolProp::GuessesStructure * >(argp5);
  {
    try {
      (arg1)->update_with_guesses(arg2,arg3,arg4,(CoolProp::GuessesStructure const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_available_in_high_level (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_available_in_high_level",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_available_in_high_level" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->available_in_high_level();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_fluid_param_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AbstractState_fluid_param_string",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_fluid_param_string" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_fluid_param_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_fluid_param_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->fluid_param_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_fluid_names (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!SWIG_check_num_args("AbstractState_fluid_names",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_fluid_names" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->fluid_names();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_set_binary_interaction_double__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_binary_interaction_double",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->set_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_set_binary_interaction_double__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_binary_interaction_double",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "3"" of type '" "std::size_t""'");
  } 
  arg3 = static_cast< std::size_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_set_binary_interaction_double" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->set_binary_interaction_double(arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_set_binary_interaction_double (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AbstractState_set_binary_interaction_double__SWIG_1(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AbstractState_set_binary_interaction_double__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_AbstractState_set_binary_interaction_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_set_binary_interaction_string",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_set_binary_interaction_string" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_set_binary_interaction_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_set_binary_interaction_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_set_binary_interaction_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AbstractState_set_binary_interaction_string" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_set_binary_interaction_string" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->set_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return 1;
}


int _wrap_AbstractState_get_binary_interaction_double__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_get_binary_interaction_double",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_get_binary_interaction_double__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_get_binary_interaction_double",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "3"" of type '" "std::size_t""'");
  } 
  arg3 = static_cast< std::size_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_get_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_double" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_get_binary_interaction_double (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AbstractState_get_binary_interaction_double__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AbstractState_get_binary_interaction_double__SWIG_0(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_AbstractState_get_binary_interaction_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AbstractState_get_binary_interaction_string",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_binary_interaction_string" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_get_binary_interaction_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_get_binary_interaction_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_get_binary_interaction_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_binary_interaction_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (arg1)->get_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_apply_simple_mixing_rule (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_apply_simple_mixing_rule",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_apply_simple_mixing_rule" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_apply_simple_mixing_rule" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_apply_simple_mixing_rule" "', argument " "3"" of type '" "std::size_t""'");
  } 
  arg3 = static_cast< std::size_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_apply_simple_mixing_rule" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_apply_simple_mixing_rule" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->apply_simple_mixing_rule(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_clear" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->clear();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_get_reducing_state (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolProp::SimpleState *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_get_reducing_state",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_reducing_state" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_reducing_state();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_get_state (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::SimpleState *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_get_state",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_state" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_get_state" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_get_state" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_state((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__SimpleState, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_Tmin (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Tmin",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Tmin" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Tmin();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Tmax (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Tmax",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Tmax" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Tmax();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_pmax (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_pmax",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_pmax" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->pmax();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Ttriple (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Ttriple",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Ttriple" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Ttriple();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_phase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolProp::phases result;
  
  if (!SWIG_check_num_args("AbstractState_phase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_phase" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (CoolProp::phases)(arg1)->phase();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_specify_phase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::phases arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_specify_phase",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_specify_phase" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_specify_phase" "', argument " "2"" of type '" "CoolProp::phases""'");
  } 
  arg2 = static_cast< CoolProp::phases >(val2);
  {
    try {
      (arg1)->specify_phase(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_unspecify_phase (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_unspecify_phase",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_unspecify_phase" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      (arg1)->unspecify_phase();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_T_critical (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_T_critical",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_T_critical" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->T_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_p_critical (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_p_critical",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_p_critical" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->p_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomolar_critical (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomolar_critical",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomolar_critical" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomolar_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomass_critical (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomass_critical",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomass_critical" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomass_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_all_critical_points (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  SwigValueWrapper< std::vector< CoolProp::CriticalState,std::allocator< CoolProp::CriticalState > > > result;
  
  if (!SWIG_check_num_args("AbstractState_all_critical_points",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_all_critical_points" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->all_critical_points();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj((new std::vector< CoolProp::CriticalState,std::allocator< CoolProp::CriticalState > >(static_cast< const std::vector< CoolProp::CriticalState,std::allocator< CoolProp::CriticalState > >& >(result))), SWIGTYPE_p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_criticality_contour_values (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_criticality_contour_values",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_criticality_contour_values" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_criticality_contour_values" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_criticality_contour_values" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_criticality_contour_values" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_criticality_contour_values" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->criticality_contour_values(*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_tangent_plane_distance__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_tangent_plane_distance",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_tangent_plane_distance" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_tangent_plane_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_tangent_plane_distance" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_tangent_plane_distance" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_tangent_plane_distance" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_tangent_plane_distance" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_tangent_plane_distance__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_tangent_plane_distance",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_tangent_plane_distance" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_tangent_plane_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_tangent_plane_distance" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_tangent_plane_distance" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_tangent_plane_distance" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_AbstractState_tangent_plane_distance (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AbstractState_tangent_plane_distance__SWIG_1(resc,resv,argc,argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AbstractState_tangent_plane_distance__SWIG_0(resc,resv,argc,argv);
            }
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_AbstractState_T_reducing (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_T_reducing",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_T_reducing" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->T_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomolar_reducing (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomolar_reducing",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomolar_reducing" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomolar_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomass_reducing (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomass_reducing",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomass_reducing" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomass_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_p_triple (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_p_triple",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_p_triple" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->p_triple();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_name (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("AbstractState_name",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_name" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->name();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dipole_moment (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_dipole_moment",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dipole_moment" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->dipole_moment();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_keyed_output (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_keyed_output",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_keyed_output" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_keyed_output" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  {
    try {
      result = (double)(arg1)->keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_trivial_keyed_output (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_trivial_keyed_output",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_trivial_keyed_output" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_trivial_keyed_output" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  {
    try {
      result = (double)(arg1)->trivial_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_saturated_liquid_keyed_output (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_saturated_liquid_keyed_output",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_saturated_liquid_keyed_output" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_saturated_liquid_keyed_output" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  {
    try {
      result = (double)(arg1)->saturated_liquid_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_saturated_vapor_keyed_output (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_saturated_vapor_keyed_output",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_saturated_vapor_keyed_output" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_saturated_vapor_keyed_output" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  {
    try {
      result = (double)(arg1)->saturated_vapor_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_T (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_T",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_T" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->T();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_rhomass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_rhomass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_rhomass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->rhomass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_p (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_p",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_p" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->p();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Q (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Q",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Q" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Q();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_tau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_tau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_tau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->tau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_delta (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_delta",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_delta" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->delta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_molar_mass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_molar_mass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_molar_mass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->molar_mass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_acentric_factor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_acentric_factor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_acentric_factor" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->acentric_factor();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_gas_constant (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_gas_constant",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_gas_constant" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->gas_constant();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Bvirial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Bvirial",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Bvirial" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Bvirial();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dBvirial_dT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_dBvirial_dT",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dBvirial_dT" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->dBvirial_dT();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Cvirial (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Cvirial",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Cvirial" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Cvirial();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dCvirial_dT (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_dCvirial_dT",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dCvirial_dT" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->dCvirial_dT();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_compressibility_factor (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_compressibility_factor",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_compressibility_factor" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->compressibility_factor();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_hmolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_hmolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_hmolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->hmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_hmass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_hmass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_hmass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->hmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_smolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_smolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_smolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->smolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_smass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_smass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_smass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->smass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_umolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_umolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_umolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->umolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_umass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_umass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_umass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->umass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cpmolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cpmolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cpmolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cpmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cpmass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cpmass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cpmass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cpmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cp0molar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cp0molar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cp0molar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cp0molar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cp0mass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cp0mass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cp0mass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cp0mass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cvmolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cvmolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cvmolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cvmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_cvmass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_cvmass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_cvmass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->cvmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_gibbsmolar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_gibbsmolar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_gibbsmolar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->gibbsmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_gibbsmass (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_gibbsmass",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_gibbsmass" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->gibbsmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_speed_sound (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_speed_sound",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_speed_sound" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->speed_sound();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_isothermal_compressibility (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_isothermal_compressibility",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_isothermal_compressibility" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->isothermal_compressibility();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_isobaric_expansion_coefficient (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_isobaric_expansion_coefficient",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_isobaric_expansion_coefficient" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->isobaric_expansion_coefficient();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_fugacity_coefficient (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_fugacity_coefficient",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_fugacity_coefficient" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_fugacity_coefficient" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    try {
      result = (double)(arg1)->fugacity_coefficient(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_fugacity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_fugacity",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_fugacity" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_fugacity" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    try {
      result = (double)(arg1)->fugacity(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_chemical_potential (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_chemical_potential",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_chemical_potential" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_chemical_potential" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    try {
      result = (double)(arg1)->chemical_potential(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_PIP (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_PIP",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_PIP" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->PIP();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_true_critical_point (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_true_critical_point",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_true_critical_point" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_true_critical_point" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_true_critical_point" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_true_critical_point" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_true_critical_point" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      (arg1)->true_critical_point(*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_ideal_curve (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_ideal_curve",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_ideal_curve" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_ideal_curve" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_ideal_curve" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_ideal_curve" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_ideal_curve" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_ideal_curve" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_ideal_curve" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  {
    try {
      (arg1)->ideal_curve((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_first_partial_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_first_partial_deriv",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_first_partial_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_first_partial_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_first_partial_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_first_partial_deriv" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  {
    try {
      result = (arg1)->first_partial_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_second_partial_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_second_partial_deriv",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_second_partial_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_second_partial_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_second_partial_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_second_partial_deriv" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_second_partial_deriv" "', argument " "5"" of type '" "CoolProp::parameters""'");
  } 
  arg5 = static_cast< CoolProp::parameters >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AbstractState_second_partial_deriv" "', argument " "6"" of type '" "CoolProp::parameters""'");
  } 
  arg6 = static_cast< CoolProp::parameters >(val6);
  {
    try {
      result = (arg1)->second_partial_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_first_saturation_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_first_saturation_deriv",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_first_saturation_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_first_saturation_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_first_saturation_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  {
    try {
      result = (arg1)->first_saturation_deriv(arg2,arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_second_saturation_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_second_saturation_deriv",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_second_saturation_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_second_saturation_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_second_saturation_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_second_saturation_deriv" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  {
    try {
      result = (arg1)->second_saturation_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_first_two_phase_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_first_two_phase_deriv",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_first_two_phase_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_first_two_phase_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_first_two_phase_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_first_two_phase_deriv" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_second_two_phase_deriv (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_second_two_phase_deriv",argc,6,6,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  ecode5 = SWIG_AsVal_int(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "5"" of type '" "CoolProp::parameters""'");
  } 
  arg5 = static_cast< CoolProp::parameters >(val5);
  ecode6 = SWIG_AsVal_int(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AbstractState_second_two_phase_deriv" "', argument " "6"" of type '" "CoolProp::parameters""'");
  } 
  arg6 = static_cast< CoolProp::parameters >(val6);
  {
    try {
      result = (double)(arg1)->second_two_phase_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_first_two_phase_deriv_splined (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_first_two_phase_deriv_splined",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_first_two_phase_deriv_splined" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_first_two_phase_deriv_splined" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_first_two_phase_deriv_splined" "', argument " "3"" of type '" "CoolProp::parameters""'");
  } 
  arg3 = static_cast< CoolProp::parameters >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_first_two_phase_deriv_splined" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_first_two_phase_deriv_splined" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv_splined(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_build_phase_envelope__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_build_phase_envelope",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_build_phase_envelope" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_build_phase_envelope" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_build_phase_envelope" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->build_phase_envelope((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_build_phase_envelope__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_build_phase_envelope",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_build_phase_envelope" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      (arg1)->build_phase_envelope();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_build_phase_envelope (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AbstractState_build_phase_envelope__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CoolProp__AbstractState, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AbstractState_build_phase_envelope__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_AbstractState_get_phase_envelope_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolProp::PhaseEnvelopeData *result = 0 ;
  
  if (!SWIG_check_num_args("AbstractState_get_phase_envelope_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_get_phase_envelope_data" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *) &(arg1)->get_phase_envelope_data();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_has_melting_line (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("AbstractState_has_melting_line",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_has_melting_line" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (bool)(arg1)->has_melting_line();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_melting_line (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_melting_line",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_melting_line" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_melting_line" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_melting_line" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_melting_line" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)(arg1)->melting_line(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_saturation_ancillary (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  int arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_saturation_ancillary",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_saturation_ancillary" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_saturation_ancillary" "', argument " "2"" of type '" "CoolProp::parameters""'");
  } 
  arg2 = static_cast< CoolProp::parameters >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbstractState_saturation_ancillary" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbstractState_saturation_ancillary" "', argument " "4"" of type '" "CoolProp::parameters""'");
  } 
  arg4 = static_cast< CoolProp::parameters >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbstractState_saturation_ancillary" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)(arg1)->saturation_ancillary(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_viscosity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_viscosity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_viscosity" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->viscosity();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_viscosity_contributions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_viscosity_contributions",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_viscosity_contributions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_viscosity_contributions" "', argument " "2"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_viscosity_contributions" "', argument " "2"" of type '" "CoolPropDbl &""'"); 
  }
  arg2 = reinterpret_cast< CoolPropDbl * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_viscosity_contributions" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_viscosity_contributions" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  arg3 = reinterpret_cast< CoolPropDbl * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_viscosity_contributions" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_viscosity_contributions" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  arg4 = reinterpret_cast< CoolPropDbl * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AbstractState_viscosity_contributions" "', argument " "5"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_viscosity_contributions" "', argument " "5"" of type '" "CoolPropDbl &""'"); 
  }
  arg5 = reinterpret_cast< CoolPropDbl * >(argp5);
  {
    try {
      (arg1)->viscosity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_conductivity (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_conductivity",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_conductivity" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->conductivity();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_conductivity_contributions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_conductivity_contributions",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_conductivity_contributions" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_conductivity_contributions" "', argument " "2"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conductivity_contributions" "', argument " "2"" of type '" "CoolPropDbl &""'"); 
  }
  arg2 = reinterpret_cast< CoolPropDbl * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_conductivity_contributions" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conductivity_contributions" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  arg3 = reinterpret_cast< CoolPropDbl * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_conductivity_contributions" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conductivity_contributions" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  arg4 = reinterpret_cast< CoolPropDbl * >(argp4);
  res5 = SWIG_ConvertPtr(argv[4], &argp5, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AbstractState_conductivity_contributions" "', argument " "5"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conductivity_contributions" "', argument " "5"" of type '" "CoolPropDbl &""'"); 
  }
  arg5 = reinterpret_cast< CoolPropDbl * >(argp5);
  {
    try {
      (arg1)->conductivity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_surface_tension (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_surface_tension",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_surface_tension" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->surface_tension();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_Prandtl (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("AbstractState_Prandtl",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_Prandtl" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (double)(arg1)->Prandtl();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_conformal_state (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_conformal_state",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_conformal_state" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbstractState_conformal_state" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conformal_state" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_conformal_state" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conformal_state" "', argument " "3"" of type '" "CoolPropDbl &""'"); 
  }
  arg3 = reinterpret_cast< CoolPropDbl * >(argp3);
  res4 = SWIG_ConvertPtr(argv[3], &argp4, SWIGTYPE_p_CoolPropDbl,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AbstractState_conformal_state" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_conformal_state" "', argument " "4"" of type '" "CoolPropDbl &""'"); 
  }
  arg4 = reinterpret_cast< CoolPropDbl * >(argp4);
  {
    try {
      (arg1)->conformal_state((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_AbstractState_change_EOS (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("AbstractState_change_EOS",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_change_EOS" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbstractState_change_EOS" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AbstractState_change_EOS" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbstractState_change_EOS" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->change_EOS(arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 0;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return 1;
}


int _wrap_AbstractState_alpha0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_alpha0",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_alpha0" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->alpha0();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dalpha0_dDelta (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_dalpha0_dDelta",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dalpha0_dDelta" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->dalpha0_dDelta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dalpha0_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_dalpha0_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dalpha0_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->dalpha0_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alpha0_dDelta2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alpha0_dDelta2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alpha0_dDelta2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alpha0_dDelta2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alpha0_dDelta_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alpha0_dDelta_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alpha0_dDelta_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alpha0_dDelta_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alpha0_dTau2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alpha0_dTau2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alpha0_dTau2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alpha0_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alpha0_dTau3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alpha0_dTau3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alpha0_dTau3" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alpha0_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alpha0_dDelta_dTau2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alpha0_dDelta_dTau2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alpha0_dDelta_dTau2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alpha0_dDelta_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alpha0_dDelta2_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alpha0_dDelta2_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alpha0_dDelta2_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alpha0_dDelta2_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alpha0_dDelta3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alpha0_dDelta3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alpha0_dDelta3" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alpha0_dDelta3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_alphar (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_alphar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_alphar" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->alphar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dalphar_dDelta (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_dalphar_dDelta",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dalphar_dDelta" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->dalphar_dDelta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_dalphar_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_dalphar_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_dalphar_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->dalphar_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alphar_dDelta2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alphar_dDelta2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alphar_dDelta2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alphar_dDelta2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alphar_dDelta_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alphar_dDelta_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alphar_dDelta_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alphar_dDelta_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d2alphar_dTau2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d2alphar_dTau2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d2alphar_dTau2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d2alphar_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alphar_dDelta3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alphar_dDelta3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alphar_dDelta3" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alphar_dDelta3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alphar_dDelta2_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alphar_dDelta2_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alphar_dDelta2_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alphar_dDelta2_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alphar_dDelta_dTau2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alphar_dDelta_dTau2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alphar_dDelta_dTau2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alphar_dDelta_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d3alphar_dTau3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d3alphar_dTau3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d3alphar_dTau3" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d3alphar_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d4alphar_dDelta4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d4alphar_dDelta4",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d4alphar_dDelta4" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d4alphar_dDelta4();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d4alphar_dDelta3_dTau (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d4alphar_dDelta3_dTau",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d4alphar_dDelta3_dTau" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d4alphar_dDelta3_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d4alphar_dDelta2_dTau2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d4alphar_dDelta2_dTau2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d4alphar_dDelta2_dTau2" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d4alphar_dDelta2_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d4alphar_dDelta_dTau3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d4alphar_dDelta_dTau3",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d4alphar_dDelta_dTau3" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d4alphar_dDelta_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_AbstractState_d4alphar_dTau4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  CoolPropDbl result;
  
  if (!SWIG_check_num_args("AbstractState_d4alphar_dTau4",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__AbstractState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbstractState_d4alphar_dTau4" "', argument " "1"" of type '" "CoolProp::AbstractState *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::AbstractState * >(argp1);
  {
    try {
      result = (arg1)->d4alphar_dTau4();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Props1SI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string arg1 ;
  std::string arg2 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Props1SI",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Props1SI" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Props1SI" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (double)CoolProp::Props1SI(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PropsSI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("PropsSI",argc,6,6,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropsSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropsSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PropsSI" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PropsSI" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSI" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PropsSI" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PropsSI" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSI" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (double)CoolProp::PropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 1;
}


int _wrap_PropsSImulti (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg7 = 0 ;
  std::vector< double,std::allocator< double > > *arg8 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  if (!SWIG_check_num_args("PropsSImulti",argc,8,8,0)) {
    SWIG_fail;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropsSImulti" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropsSImulti" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PropsSImulti" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PropsSImulti" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res5 = swig::asptr(argv[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PropsSImulti" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PropsSImulti" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res7 = swig::asptr(argv[6], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PropsSImulti" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "7"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg7 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res8 = swig::asptr(argv[7], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PropsSImulti" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropsSImulti" "', argument " "8"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg8 = ptr;
  }
  {
    try {
      result = CoolProp::PropsSImulti((std::vector< std::string,std::allocator< std::string > > const &)*arg1,(std::string const &)*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::string const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5,(std::string const &)*arg6,(std::vector< std::string,std::allocator< std::string > > const &)*arg7,(std::vector< double,std::allocator< double > > const &)*arg8);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = swig::from(static_cast< std::vector<std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return 1;
}


int _wrap_get_debug_level (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("get_debug_level",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (int)CoolProp::get_debug_level();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_set_debug_level (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_debug_level",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_debug_level" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      CoolProp::set_debug_level(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_set_error_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_error_string",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_error_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_error_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      CoolProp::set_error_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_set_warning_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_warning_string",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_warning_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_warning_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      CoolProp::set_warning_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_saturation_ancillary (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("saturation_ancillary",argc,5,5,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "saturation_ancillary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "saturation_ancillary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "saturation_ancillary" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "saturation_ancillary" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "saturation_ancillary" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "saturation_ancillary" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "saturation_ancillary" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "saturation_ancillary" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)CoolProp::saturation_ancillary((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return 1;
}


int _wrap_get_global_param_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_global_param_string",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_global_param_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_global_param_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = CoolProp::get_global_param_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_get_fluid_param_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_fluid_param_string",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_fluid_param_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_fluid_param_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_fluid_param_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_fluid_param_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = CoolProp::get_fluid_param_string((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_is_valid_fluid_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("is_valid_fluid_string",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_valid_fluid_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_valid_fluid_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (bool)CoolProp::is_valid_fluid_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_add_fluids_as_JSON (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("add_fluids_as_JSON",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_fluids_as_JSON" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_fluids_as_JSON" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add_fluids_as_JSON" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add_fluids_as_JSON" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)CoolProp::add_fluids_as_JSON((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_set_reference_stateS (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_reference_stateS",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_reference_stateS" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_reference_stateS" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_reference_stateS" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_reference_stateS" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      CoolProp::set_reference_stateS((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_set_reference_stateD (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_reference_stateD",argc,5,5,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_reference_stateD" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_reference_stateD" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_reference_stateD" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "set_reference_stateD" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "set_reference_stateD" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "set_reference_stateD" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      CoolProp::set_reference_stateD((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_PhaseSI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PhaseSI",argc,5,5,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseSI" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PhaseSI" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseSI" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PhaseSI" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PhaseSI" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseSI" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = CoolProp::PhaseSI((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return 1;
}


int _wrap_extract_backend (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("extract_backend",argc,3,3,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "extract_backend" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extract_backend" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extract_backend" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "extract_backend" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extract_backend" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    try {
      CoolProp::extract_backend(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_extract_fractions (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("extract_fractions",argc,2,2,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "extract_fractions" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extract_fractions" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "extract_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "extract_fractions" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  {
    try {
      result = CoolProp::extract_fractions((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_PhaseEnvelopeData_TypeI_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_TypeI_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_TypeI_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_TypeI_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->TypeI = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_TypeI_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_TypeI_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_TypeI_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (bool) ((arg1)->TypeI);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_built_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_built_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_built_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_built_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->built = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_built_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_built_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_built_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (bool) ((arg1)->built);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_iTsat_max_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_iTsat_max_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_iTsat_max_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_iTsat_max_set" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  if (arg1) (arg1)->iTsat_max = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_iTsat_max_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::size_t result;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_iTsat_max_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_iTsat_max_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result =  ((arg1)->iTsat_max);
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_ipsat_max_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_ipsat_max_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_ipsat_max_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_ipsat_max_set" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  if (arg1) (arg1)->ipsat_max = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_ipsat_max_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::size_t result;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_ipsat_max_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_ipsat_max_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result =  ((arg1)->ipsat_max);
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_icrit_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_icrit_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_icrit_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_icrit_set" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  if (arg1) (arg1)->icrit = arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_icrit_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::size_t result;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_icrit_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_icrit_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result =  ((arg1)->icrit);
  _out = SWIG_From_size_t(static_cast< size_t >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_T_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_T_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_T_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_T_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->T = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_T_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_T_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_T_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->T);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_p_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_p_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_p_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_p_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->p = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_p_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_p_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_p_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->p);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnT_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnT_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnT_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_lnT_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->lnT = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnT_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnT_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnT_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->lnT);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnp_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnp_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnp_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_lnp_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->lnp = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnp_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnp_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnp_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->lnp);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_rhomolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_rhomolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_rhomolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_rhomolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->rhomolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_rhomolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_rhomolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_rhomolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->rhomolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_rhomolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_rhomolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_rhomolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_rhomolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->rhomolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_rhomolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_rhomolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_rhomolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->rhomolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnrhomolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnrhomolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnrhomolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_lnrhomolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->lnrhomolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnrhomolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnrhomolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnrhomolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->lnrhomolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnrhomolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnrhomolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnrhomolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_lnrhomolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->lnrhomolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnrhomolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnrhomolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnrhomolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->lnrhomolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_hmolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_hmolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_hmolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_hmolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->hmolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_hmolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_hmolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_hmolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->hmolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_hmolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_hmolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_hmolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_hmolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->hmolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_hmolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_hmolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_hmolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->hmolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_smolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_smolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_smolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_smolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->smolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_smolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_smolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_smolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->smolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_smolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_smolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_smolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_smolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->smolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_smolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_smolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_smolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->smolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_Q_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_Q_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_Q_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_Q_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->Q = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_Q_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_Q_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_Q_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->Q);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cpmolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cpmolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cpmolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_cpmolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->cpmolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cpmolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cpmolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cpmolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->cpmolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cpmolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cpmolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cpmolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_cpmolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->cpmolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cpmolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cpmolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cpmolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->cpmolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cvmolar_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cvmolar_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cvmolar_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_cvmolar_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->cvmolar_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cvmolar_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cvmolar_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cvmolar_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->cvmolar_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cvmolar_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cvmolar_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cvmolar_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_cvmolar_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->cvmolar_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_cvmolar_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_cvmolar_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_cvmolar_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->cvmolar_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_viscosity_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_viscosity_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_viscosity_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_viscosity_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->viscosity_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_viscosity_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_viscosity_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_viscosity_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->viscosity_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_viscosity_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_viscosity_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_viscosity_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_viscosity_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->viscosity_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_viscosity_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_viscosity_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_viscosity_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->viscosity_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_conductivity_liq_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_conductivity_liq_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_conductivity_liq_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_conductivity_liq_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->conductivity_liq = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_conductivity_liq_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_conductivity_liq_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_conductivity_liq_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->conductivity_liq);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_conductivity_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_conductivity_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_conductivity_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_conductivity_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->conductivity_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_conductivity_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_conductivity_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_conductivity_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->conductivity_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_speed_sound_vap_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_speed_sound_vap_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_speed_sound_vap_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_speed_sound_vap_set" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  if (arg1) (arg1)->speed_sound_vap = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_speed_sound_vap_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_speed_sound_vap_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_speed_sound_vap_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->speed_sound_vap);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_K_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_K_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_K_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_K_set" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  if (arg1) (arg1)->K = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_K_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_K_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_K_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)& ((arg1)->K);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnK_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnK_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnK_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_lnK_set" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  if (arg1) (arg1)->lnK = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_lnK_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_lnK_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_lnK_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)& ((arg1)->lnK);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_x_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_x_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_x_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_x_set" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  if (arg1) (arg1)->x = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_x_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_x_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_x_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)& ((arg1)->x);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_y_set (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_y_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_y_set" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PhaseEnvelopeData_y_set" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  if (arg1) (arg1)->y = *arg2;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_y_get (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_y_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_y_get" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)& ((arg1)->y);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_PhaseEnvelopeData (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::PhaseEnvelopeData *result = 0 ;
  
  if (!SWIG_check_num_args("new_PhaseEnvelopeData",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *)new CoolProp::PhaseEnvelopeData();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_resize" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_resize" "', argument " "2"" of type '" "std::size_t""'");
  } 
  arg2 = static_cast< std::size_t >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_clear (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_clear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_clear" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  {
    try {
      (arg1)->clear();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_insert_variables (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *arg10 = 0 ;
  std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *arg11 = 0 ;
  std::size_t arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_insert_variables",argc,12,12,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "2"" of type '" "CoolPropDbl""'");
  } 
  arg2 = static_cast< CoolPropDbl >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "3"" of type '" "CoolPropDbl""'");
  } 
  arg3 = static_cast< CoolPropDbl >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "4"" of type '" "CoolPropDbl""'");
  } 
  arg4 = static_cast< CoolPropDbl >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "5"" of type '" "CoolPropDbl""'");
  } 
  arg5 = static_cast< CoolPropDbl >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "6"" of type '" "CoolPropDbl""'");
  } 
  arg6 = static_cast< CoolPropDbl >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "7"" of type '" "CoolPropDbl""'");
  } 
  arg7 = static_cast< CoolPropDbl >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "8"" of type '" "CoolPropDbl""'");
  } 
  arg8 = static_cast< CoolPropDbl >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "9"" of type '" "CoolPropDbl""'");
  } 
  arg9 = static_cast< CoolPropDbl >(val9);
  res10 = SWIG_ConvertPtr(argv[9], &argp10, SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "10"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "10"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  arg10 = reinterpret_cast< std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > * >(argp10);
  res11 = SWIG_ConvertPtr(argv[10], &argp11, SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "11"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "11"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  arg11 = reinterpret_cast< std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > * >(argp11);
  ecode12 = SWIG_AsVal_size_t(argv[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "PhaseEnvelopeData_insert_variables" "', argument " "12"" of type '" "std::size_t""'");
  } 
  arg12 = static_cast< std::size_t >(val12);
  {
    try {
      (arg1)->insert_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &)*arg10,(std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &)*arg11,arg12);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_PhaseEnvelopeData_store_variables (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *arg10 = 0 ;
  std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PhaseEnvelopeData_store_variables",argc,11,11,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "2"" of type '" "CoolPropDbl""'");
  } 
  arg2 = static_cast< CoolPropDbl >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "3"" of type '" "CoolPropDbl""'");
  } 
  arg3 = static_cast< CoolPropDbl >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "4"" of type '" "CoolPropDbl""'");
  } 
  arg4 = static_cast< CoolPropDbl >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "5"" of type '" "CoolPropDbl""'");
  } 
  arg5 = static_cast< CoolPropDbl >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "6"" of type '" "CoolPropDbl""'");
  } 
  arg6 = static_cast< CoolPropDbl >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "7"" of type '" "CoolPropDbl""'");
  } 
  arg7 = static_cast< CoolPropDbl >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "8"" of type '" "CoolPropDbl""'");
  } 
  arg8 = static_cast< CoolPropDbl >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "9"" of type '" "CoolPropDbl""'");
  } 
  arg9 = static_cast< CoolPropDbl >(val9);
  res10 = SWIG_ConvertPtr(argv[9], &argp10, SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "10"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseEnvelopeData_store_variables" "', argument " "10"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  arg10 = reinterpret_cast< std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > * >(argp10);
  res11 = SWIG_ConvertPtr(argv[10], &argp11, SWIGTYPE_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "PhaseEnvelopeData_store_variables" "', argument " "11"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PhaseEnvelopeData_store_variables" "', argument " "11"" of type '" "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &""'"); 
  }
  arg11 = reinterpret_cast< std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > * >(argp11);
  {
    try {
      (arg1)->store_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &)*arg10,(std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > const &)*arg11);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_PhaseEnvelopeData (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_PhaseEnvelopeData",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__PhaseEnvelopeData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PhaseEnvelopeData" "', argument " "1"" of type '" "CoolProp::PhaseEnvelopeData *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::PhaseEnvelopeData * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_config_key_to_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("config_key_to_string",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "config_key_to_string" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    try {
      result = CoolProp::config_key_to_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_config_key_description__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("config_key_description",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "config_key_description" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    try {
      result = CoolProp::config_key_description(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_config_key_description__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string arg1 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("config_key_description",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "config_key_description" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = CoolProp::config_key_description(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_config_key_description (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_config_key_description__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_config_key_description__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_new_ConfigurationItem__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("new_ConfigurationItem",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfigurationItem" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ConfigurationItem__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("new_ConfigurationItem",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfigurationItem" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ConfigurationItem__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("new_ConfigurationItem",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfigurationItem" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_ConfigurationItem__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("new_ConfigurationItem",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfigurationItem" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,(char const *)arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_new_ConfigurationItem__SWIG_4 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("new_ConfigurationItem",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConfigurationItem" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfigurationItem" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_new_ConfigurationItem (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ConfigurationItem__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ConfigurationItem__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ConfigurationItem__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ConfigurationItem__SWIG_4(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ConfigurationItem__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return 1;
}


int _wrap_ConfigurationItem_set_bool (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ConfigurationItem_set_bool",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurationItem_set_bool" "', argument " "1"" of type '" "CoolProp::ConfigurationItem *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurationItem_set_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_bool(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ConfigurationItem_set_integer (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ConfigurationItem_set_integer",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurationItem_set_integer" "', argument " "1"" of type '" "CoolProp::ConfigurationItem *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurationItem_set_integer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_integer(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ConfigurationItem_set_double (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ConfigurationItem_set_double",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurationItem_set_double" "', argument " "1"" of type '" "CoolProp::ConfigurationItem *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurationItem_set_double" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_double(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_ConfigurationItem_set_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("ConfigurationItem_set_string",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurationItem_set_string" "', argument " "1"" of type '" "CoolProp::ConfigurationItem *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurationItem_set_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurationItem_set_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_ConfigurationItem_get_key (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  configuration_keys result;
  
  if (!SWIG_check_num_args("ConfigurationItem_get_key",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurationItem_get_key" "', argument " "1"" of type '" "CoolProp::ConfigurationItem const *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  {
    try {
      result = (configuration_keys)((CoolProp::ConfigurationItem const *)arg1)->get_key();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_ConfigurationItem (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_ConfigurationItem",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__ConfigurationItem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConfigurationItem" "', argument " "1"" of type '" "CoolProp::ConfigurationItem *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::ConfigurationItem * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_Configuration (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  CoolProp::Configuration *result = 0 ;
  
  if (!SWIG_check_num_args("new_Configuration",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = (CoolProp::Configuration *)new CoolProp::Configuration();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__Configuration, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_Configuration (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Configuration",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__Configuration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Configuration" "', argument " "1"" of type '" "CoolProp::Configuration *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::Configuration * >(argp1);
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Configuration_get_item (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  configuration_keys arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  CoolProp::ConfigurationItem *result = 0 ;
  
  if (!SWIG_check_num_args("Configuration_get_item",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_get_item" "', argument " "1"" of type '" "CoolProp::Configuration *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::Configuration * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Configuration_get_item" "', argument " "2"" of type '" "configuration_keys""'");
  } 
  arg2 = static_cast< configuration_keys >(val2);
  {
    try {
      result = (CoolProp::ConfigurationItem *) &(arg1)->get_item(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CoolProp__ConfigurationItem, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Configuration_add_item (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  SwigValueWrapper< CoolProp::ConfigurationItem > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Configuration_add_item",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_add_item" "', argument " "1"" of type '" "CoolProp::Configuration *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::Configuration * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_CoolProp__ConfigurationItem,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_add_item" "', argument " "2"" of type '" "CoolProp::ConfigurationItem""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Configuration_add_item" "', argument " "2"" of type '" "CoolProp::ConfigurationItem""'");
    } else {
      arg2 = *(reinterpret_cast< CoolProp::ConfigurationItem * >(argp2));
    }
  }
  {
    try {
      (arg1)->add_item(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Configuration_get_items (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::map< configuration_keys,CoolProp::ConfigurationItem > *result = 0 ;
  
  if (!SWIG_check_num_args("Configuration_get_items",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_get_items" "', argument " "1"" of type '" "CoolProp::Configuration *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::Configuration * >(argp1);
  {
    try {
      result = (std::map< configuration_keys,CoolProp::ConfigurationItem > *) &(arg1)->get_items();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_Configuration_set_defaults (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Configuration_set_defaults",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_CoolProp__Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_set_defaults" "', argument " "1"" of type '" "CoolProp::Configuration *""'"); 
  }
  arg1 = reinterpret_cast< CoolProp::Configuration * >(argp1);
  {
    try {
      (arg1)->set_defaults();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_config_bool (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("get_config_bool",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_config_bool" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    try {
      result = (bool)CoolProp::get_config_bool(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_config_double (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("get_config_double",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_config_double" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    try {
      result = (double)CoolProp::get_config_double(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_config_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_config_string",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_config_string" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    try {
      result = CoolProp::get_config_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_get_config_as_json_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("get_config_as_json_string",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      result = CoolProp::get_config_as_json_string();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_set_config_bool (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_config_bool",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_config_bool" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_config_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      CoolProp::set_config_bool(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_set_config_double (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_config_double",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_config_double" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_config_double" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      CoolProp::set_config_double(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_set_config_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  configuration_keys arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_config_string",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_config_string" "', argument " "1"" of type '" "configuration_keys""'");
  } 
  arg1 = static_cast< configuration_keys >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "set_config_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_config_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      CoolProp::set_config_string(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 0;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return 1;
}


int _wrap_set_config_as_json_string (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("set_config_as_json_string",argc,1,1,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_config_as_json_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "set_config_as_json_string" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      CoolProp::set_config_as_json_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return 1;
}


int _wrap_HAPropsSI (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  double val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HAPropsSI",argc,7,7,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAPropsSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAPropsSI" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAPropsSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAPropsSI" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HAPropsSI" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HAPropsSI" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAPropsSI" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HAPropsSI" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "HAPropsSI" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAPropsSI" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HAPropsSI" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (double)HumidAir::HAPropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 1;
}


int _wrap_HAProps (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  double val7 ;
  int ecode7 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HAProps",argc,7,7,0)) {
    SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAProps" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAProps" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HAProps" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAProps" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HAProps" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HAProps" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAProps" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HAProps" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "HAProps" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HAProps" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HAProps" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (double)HumidAir::HAProps((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return 1;
}


int _wrap_HAProps_Aux (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HAProps_Aux",argc,5,5,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HAProps_Aux" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HAProps_Aux" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HAProps_Aux" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HAProps_Aux" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_AsCharPtrAndSize(argv[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "HAProps_Aux" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    try {
      result = (double)HumidAir::HAProps_Aux((char const *)arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return 1;
}


int _wrap_IceProps (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IceProps",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IceProps" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IceProps" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IceProps" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)HumidAir::IceProps((char const *)arg1,arg2,arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_UseVirialCorrelations (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UseVirialCorrelations",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UseVirialCorrelations" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      HumidAir::UseVirialCorrelations(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UseIsothermCompressCorrelation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UseIsothermCompressCorrelation",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UseIsothermCompressCorrelation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      HumidAir::UseIsothermCompressCorrelation(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_UseIdealGasEnthalpyCorrelations (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("UseIdealGasEnthalpyCorrelations",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UseIdealGasEnthalpyCorrelations" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      HumidAir::UseIdealGasEnthalpyCorrelations(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HAHelp (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  
  if (!SWIG_check_num_args("HAHelp",argc,0,0,0)) {
    SWIG_fail;
  }
  {
    try {
      HumidAir::HAHelp();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_returnHumAirCode (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("returnHumAirCode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "returnHumAirCode" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (int)HumidAir::returnHumAirCode((char const *)arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_cair_sat (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("cair_sat",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cair_sat" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)HumidAir::cair_sat(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return 0;
fail:
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CoolProp__SsatSimpleStateTo_p_CoolProp__SimpleState(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CoolProp::SimpleState *)  ((CoolProp::SsatSimpleState *) x));
}
static void *_p_CoolProp__CriticalStateTo_p_CoolProp__SimpleState(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CoolProp::SimpleState *)  ((CoolProp::CriticalState *) x));
}
static swig_type_info _swigt__p_CoolPropDbl = {"_p_CoolPropDbl", "CoolPropDbl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CoolProp__AbstractState = {"_p_CoolProp__AbstractState", "CoolProp::AbstractState *", 0, 0, (void*)"CoolProp.AbstractState", 0};
static swig_type_info _swigt__p_CoolProp__Configuration = {"_p_CoolProp__Configuration", "CoolProp::Configuration *", 0, 0, (void*)"CoolProp.Configuration", 0};
static swig_type_info _swigt__p_CoolProp__ConfigurationItem = {"_p_CoolProp__ConfigurationItem", "CoolProp::ConfigurationItem *", 0, 0, (void*)"CoolProp.ConfigurationItem", 0};
static swig_type_info _swigt__p_CoolProp__CriticalState = {"_p_CoolProp__CriticalState", "CoolProp::CriticalState *", 0, 0, (void*)"CoolProp.CriticalState", 0};
static swig_type_info _swigt__p_CoolProp__GuessesStructure = {"_p_CoolProp__GuessesStructure", "CoolProp::GuessesStructure *", 0, 0, (void*)"CoolProp.GuessesStructure", 0};
static swig_type_info _swigt__p_CoolProp__PhaseEnvelopeData = {"_p_CoolProp__PhaseEnvelopeData", "CoolProp::PhaseEnvelopeData *", 0, 0, (void*)"CoolProp.PhaseEnvelopeData", 0};
static swig_type_info _swigt__p_CoolProp__SimpleState = {"_p_CoolProp__SimpleState", "CoolProp::SimpleState *", 0, 0, (void*)"CoolProp.SimpleState", 0};
static swig_type_info _swigt__p_CoolProp__SsatSimpleState = {"_p_CoolProp__SsatSimpleState", "CoolProp::SsatSimpleState *", 0, 0, (void*)"CoolProp.SsatSimpleState", 0};
static swig_type_info _swigt__p_CoolProp__parameters = {"_p_CoolProp__parameters", "enum CoolProp::parameters *|CoolProp::parameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "std::allocator< std::vector< std::string,std::allocator< std::string > > > *|std::vector< std::vector< std::string > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t = {"_p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t", "std::map< configuration_keys,CoolProp::ConfigurationItem > *|std::map< enum configuration_keys,CoolProp::ConfigurationItem > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t = {"_p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t", "std::vector< CoolPropDbl,std::allocator< CoolPropDbl > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t = {"_p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t", "std::vector< CoolProp::CriticalState,std::allocator< CoolProp::CriticalState > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)"CoolProp.DoubleVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string > *|std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)"CoolProp.StringVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)"CoolProp.VectorOfDoubleVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t", "std::vector< std::vector< std::string > > *|std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *|std::vector< std::vector< std::string,std::allocator< std::string > > > *", 0, 0, (void*)"CoolProp.VectorOfStringVector", 0};
static swig_type_info _swigt__p_swig__MatlabSwigIterator = {"_p_swig__MatlabSwigIterator", "swig::MatlabSwigIterator *", 0, 0, (void*)"CoolProp.MatlabSwigIterator", 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CoolPropDbl,
  &_swigt__p_CoolProp__AbstractState,
  &_swigt__p_CoolProp__Configuration,
  &_swigt__p_CoolProp__ConfigurationItem,
  &_swigt__p_CoolProp__CriticalState,
  &_swigt__p_CoolProp__GuessesStructure,
  &_swigt__p_CoolProp__PhaseEnvelopeData,
  &_swigt__p_CoolProp__SimpleState,
  &_swigt__p_CoolProp__SsatSimpleState,
  &_swigt__p_CoolProp__parameters,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,
  &_swigt__p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_swig__MatlabSwigIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_CoolPropDbl[] = {  {&_swigt__p_CoolPropDbl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__AbstractState[] = {  {&_swigt__p_CoolProp__AbstractState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__Configuration[] = {  {&_swigt__p_CoolProp__Configuration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__ConfigurationItem[] = {  {&_swigt__p_CoolProp__ConfigurationItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__CriticalState[] = {  {&_swigt__p_CoolProp__CriticalState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__GuessesStructure[] = {  {&_swigt__p_CoolProp__GuessesStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__PhaseEnvelopeData[] = {  {&_swigt__p_CoolProp__PhaseEnvelopeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__SimpleState[] = {  {&_swigt__p_CoolProp__SimpleState, 0, 0, 0},  {&_swigt__p_CoolProp__SsatSimpleState, _p_CoolProp__SsatSimpleStateTo_p_CoolProp__SimpleState, 0, 0},  {&_swigt__p_CoolProp__CriticalState, _p_CoolProp__CriticalStateTo_p_CoolProp__SimpleState, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__SsatSimpleState[] = {  {&_swigt__p_CoolProp__SsatSimpleState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CoolProp__parameters[] = {  {&_swigt__p_CoolProp__parameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t[] = {  {&_swigt__p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t[] = {  {&_swigt__p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t[] = {  {&_swigt__p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__MatlabSwigIterator[] = {  {&_swigt__p_swig__MatlabSwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CoolPropDbl,
  _swigc__p_CoolProp__AbstractState,
  _swigc__p_CoolProp__Configuration,
  _swigc__p_CoolProp__ConfigurationItem,
  _swigc__p_CoolProp__CriticalState,
  _swigc__p_CoolProp__GuessesStructure,
  _swigc__p_CoolProp__PhaseEnvelopeData,
  _swigc__p_CoolProp__SimpleState,
  _swigc__p_CoolProp__SsatSimpleState,
  _swigc__p_CoolProp__parameters,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_std__mapT_configuration_keys_CoolProp__ConfigurationItem_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_CoolPropDbl_std__allocatorT_CoolPropDbl_t_t,
  _swigc__p_std__vectorT_CoolProp__CriticalState_std__allocatorT_CoolProp__CriticalState_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__allocatorT_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_swig__MatlabSwigIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


static bool is_loaded = false;
void SWIG_Matlab_LoadModule(const char* name) {
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  if(false){
    mexErrMsgIdAndTxt("SWIG:LoadFailure","Could not load module %s",name);
  }

}


const char* swigConstantName_(int con_id) {
  switch (con_id) {
  case 0: return "SsatSimpleState_SSAT_MAX_NOT_SET";
  case 1: return "SsatSimpleState_SSAT_MAX_DOESNT_EXIST";
  case 2: return "SsatSimpleState_SSAT_MAX_DOES_EXIST";
  case 3: return "INVALID_PARAMETER";
  case 4: return "igas_constant";
  case 5: return "imolar_mass";
  case 6: return "iacentric_factor";
  case 7: return "irhomolar_reducing";
  case 8: return "irhomolar_critical";
  case 9: return "iT_reducing";
  case 10: return "iT_critical";
  case 11: return "irhomass_reducing";
  case 12: return "irhomass_critical";
  case 13: return "iP_critical";
  case 14: return "iP_reducing";
  case 15: return "iT_triple";
  case 16: return "iP_triple";
  case 17: return "iT_min";
  case 18: return "iT_max";
  case 19: return "iP_max";
  case 20: return "iP_min";
  case 21: return "idipole_moment";
  case 22: return "iT";
  case 23: return "iP";
  case 24: return "iQ";
  case 25: return "iTau";
  case 26: return "iDelta";
  case 27: return "iDmolar";
  case 28: return "iHmolar";
  case 29: return "iSmolar";
  case 30: return "iCpmolar";
  case 31: return "iCp0molar";
  case 32: return "iCvmolar";
  case 33: return "iUmolar";
  case 34: return "iGmolar";
  case 35: return "iSmolar_residual";
  case 36: return "iDmass";
  case 37: return "iHmass";
  case 38: return "iSmass";
  case 39: return "iCpmass";
  case 40: return "iCp0mass";
  case 41: return "iCvmass";
  case 42: return "iUmass";
  case 43: return "iGmass";
  case 44: return "iviscosity";
  case 45: return "iconductivity";
  case 46: return "isurface_tension";
  case 47: return "iPrandtl";
  case 48: return "ispeed_sound";
  case 49: return "iisothermal_compressibility";
  case 50: return "iisobaric_expansion_coefficient";
  case 51: return "ifundamental_derivative_of_gas_dynamics";
  case 52: return "ialphar";
  case 53: return "idalphar_dtau_constdelta";
  case 54: return "idalphar_ddelta_consttau";
  case 55: return "ialpha0";
  case 56: return "idalpha0_dtau_constdelta";
  case 57: return "idalpha0_ddelta_consttau";
  case 58: return "iBvirial";
  case 59: return "iCvirial";
  case 60: return "idBvirial_dT";
  case 61: return "idCvirial_dT";
  case 62: return "iZ";
  case 63: return "iPIP";
  case 64: return "ifraction_min";
  case 65: return "ifraction_max";
  case 66: return "iT_freeze";
  case 67: return "iGWP20";
  case 68: return "iGWP100";
  case 69: return "iGWP500";
  case 70: return "iFH";
  case 71: return "iHH";
  case 72: return "iPH";
  case 73: return "iODP";
  case 74: return "iPhase";
  case 75: return "iundefined_parameter";
  case 76: return "iphase_liquid";
  case 77: return "iphase_supercritical";
  case 78: return "iphase_supercritical_gas";
  case 79: return "iphase_supercritical_liquid";
  case 80: return "iphase_critical_point";
  case 81: return "iphase_gas";
  case 82: return "iphase_twophase";
  case 83: return "iphase_unknown";
  case 84: return "iphase_not_imposed";
  case 85: return "IFRAC_MASS";
  case 86: return "IFRAC_MOLE";
  case 87: return "IFRAC_VOLUME";
  case 88: return "IFRAC_UNDEFINED";
  case 89: return "IFRAC_PURE";
  case 90: return "FLUID_TYPE_PURE";
  case 91: return "FLUID_TYPE_PSEUDOPURE";
  case 92: return "FLUID_TYPE_REFPROP";
  case 93: return "FLUID_TYPE_INCOMPRESSIBLE_LIQUID";
  case 94: return "FLUID_TYPE_INCOMPRESSIBLE_SOLUTION";
  case 95: return "FLUID_TYPE_UNDEFINED";
  case 96: return "INPUT_PAIR_INVALID";
  case 97: return "QT_INPUTS";
  case 98: return "PQ_INPUTS";
  case 99: return "QSmolar_INPUTS";
  case 100: return "QSmass_INPUTS";
  case 101: return "HmolarQ_INPUTS";
  case 102: return "HmassQ_INPUTS";
  case 103: return "DmolarQ_INPUTS";
  case 104: return "DmassQ_INPUTS";
  case 105: return "PT_INPUTS";
  case 106: return "DmassT_INPUTS";
  case 107: return "DmolarT_INPUTS";
  case 108: return "HmolarT_INPUTS";
  case 109: return "HmassT_INPUTS";
  case 110: return "SmolarT_INPUTS";
  case 111: return "SmassT_INPUTS";
  case 112: return "TUmolar_INPUTS";
  case 113: return "TUmass_INPUTS";
  case 114: return "DmassP_INPUTS";
  case 115: return "DmolarP_INPUTS";
  case 116: return "HmassP_INPUTS";
  case 117: return "HmolarP_INPUTS";
  case 118: return "PSmass_INPUTS";
  case 119: return "PSmolar_INPUTS";
  case 120: return "PUmass_INPUTS";
  case 121: return "PUmolar_INPUTS";
  case 122: return "HmassSmass_INPUTS";
  case 123: return "HmolarSmolar_INPUTS";
  case 124: return "SmassUmass_INPUTS";
  case 125: return "SmolarUmolar_INPUTS";
  case 126: return "DmassHmass_INPUTS";
  case 127: return "DmolarHmolar_INPUTS";
  case 128: return "DmassSmass_INPUTS";
  case 129: return "DmolarSmolar_INPUTS";
  case 130: return "DmassUmass_INPUTS";
  case 131: return "DmolarUmolar_INPUTS";
  case 132: return "NORMALIZE_GAS_CONSTANTS";
  case 133: return "CRITICAL_WITHIN_1UK";
  case 134: return "CRITICAL_SPLINES_ENABLED";
  case 135: return "SAVE_RAW_TABLES";
  case 136: return "ALTERNATIVE_TABLES_DIRECTORY";
  case 137: return "ALTERNATIVE_REFPROP_PATH";
  case 138: return "ALTERNATIVE_REFPROP_HMX_BNC_PATH";
  case 139: return "REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS";
  case 140: return "REFPROP_USE_GERG";
  case 141: return "MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB";
  case 142: return "DONT_CHECK_PROPERTY_LIMITS";
  case 143: return "HENRYS_LAW_TO_GENERATE_VLE_GUESSES";
  case 144: return "PHASE_ENVELOPE_STARTING_PRESSURE_PA";
  case 145: return "R_U_CODATA";
  case 146: return "CONFIGURATION_NOT_DEFINED_TYPE";
  case 147: return "CONFIGURATION_BOOL_TYPE";
  case 148: return "CONFIGURATION_DOUBLE_TYPE";
  case 149: return "CONFIGURATION_INTEGER_TYPE";
  case 150: return "CONFIGURATION_STRING_TYPE";
  case 151: return "CONFIGURATION_ENDOFLIST_TYPE";
  default: return 0;
  }
}

int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = swigConstantName_(con_id);
  if (s==0) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

extern "C"
int swigConstant(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  case 0: *resv = SWIG_Matlab_SetConstant(module_ns,"SsatSimpleState_SSAT_MAX_NOT_SET",SWIG_From_int(static_cast< int >(CoolProp::SsatSimpleState::SSAT_MAX_NOT_SET)));; break;
  case 1: *resv = SWIG_Matlab_SetConstant(module_ns,"SsatSimpleState_SSAT_MAX_DOESNT_EXIST",SWIG_From_int(static_cast< int >(CoolProp::SsatSimpleState::SSAT_MAX_DOESNT_EXIST)));; break;
  case 2: *resv = SWIG_Matlab_SetConstant(module_ns,"SsatSimpleState_SSAT_MAX_DOES_EXIST",SWIG_From_int(static_cast< int >(CoolProp::SsatSimpleState::SSAT_MAX_DOES_EXIST)));; break;
  case 3: *resv = SWIG_Matlab_SetConstant(module_ns,"INVALID_PARAMETER",SWIG_From_int(static_cast< int >(CoolProp::INVALID_PARAMETER)));; break;
  case 4: *resv = SWIG_Matlab_SetConstant(module_ns,"igas_constant",SWIG_From_int(static_cast< int >(CoolProp::igas_constant)));; break;
  case 5: *resv = SWIG_Matlab_SetConstant(module_ns,"imolar_mass",SWIG_From_int(static_cast< int >(CoolProp::imolar_mass)));; break;
  case 6: *resv = SWIG_Matlab_SetConstant(module_ns,"iacentric_factor",SWIG_From_int(static_cast< int >(CoolProp::iacentric_factor)));; break;
  case 7: *resv = SWIG_Matlab_SetConstant(module_ns,"irhomolar_reducing",SWIG_From_int(static_cast< int >(CoolProp::irhomolar_reducing)));; break;
  case 8: *resv = SWIG_Matlab_SetConstant(module_ns,"irhomolar_critical",SWIG_From_int(static_cast< int >(CoolProp::irhomolar_critical)));; break;
  case 9: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_reducing",SWIG_From_int(static_cast< int >(CoolProp::iT_reducing)));; break;
  case 10: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_critical",SWIG_From_int(static_cast< int >(CoolProp::iT_critical)));; break;
  case 11: *resv = SWIG_Matlab_SetConstant(module_ns,"irhomass_reducing",SWIG_From_int(static_cast< int >(CoolProp::irhomass_reducing)));; break;
  case 12: *resv = SWIG_Matlab_SetConstant(module_ns,"irhomass_critical",SWIG_From_int(static_cast< int >(CoolProp::irhomass_critical)));; break;
  case 13: *resv = SWIG_Matlab_SetConstant(module_ns,"iP_critical",SWIG_From_int(static_cast< int >(CoolProp::iP_critical)));; break;
  case 14: *resv = SWIG_Matlab_SetConstant(module_ns,"iP_reducing",SWIG_From_int(static_cast< int >(CoolProp::iP_reducing)));; break;
  case 15: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_triple",SWIG_From_int(static_cast< int >(CoolProp::iT_triple)));; break;
  case 16: *resv = SWIG_Matlab_SetConstant(module_ns,"iP_triple",SWIG_From_int(static_cast< int >(CoolProp::iP_triple)));; break;
  case 17: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_min",SWIG_From_int(static_cast< int >(CoolProp::iT_min)));; break;
  case 18: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_max",SWIG_From_int(static_cast< int >(CoolProp::iT_max)));; break;
  case 19: *resv = SWIG_Matlab_SetConstant(module_ns,"iP_max",SWIG_From_int(static_cast< int >(CoolProp::iP_max)));; break;
  case 20: *resv = SWIG_Matlab_SetConstant(module_ns,"iP_min",SWIG_From_int(static_cast< int >(CoolProp::iP_min)));; break;
  case 21: *resv = SWIG_Matlab_SetConstant(module_ns,"idipole_moment",SWIG_From_int(static_cast< int >(CoolProp::idipole_moment)));; break;
  case 22: *resv = SWIG_Matlab_SetConstant(module_ns,"iT",SWIG_From_int(static_cast< int >(CoolProp::iT)));; break;
  case 23: *resv = SWIG_Matlab_SetConstant(module_ns,"iP",SWIG_From_int(static_cast< int >(CoolProp::iP)));; break;
  case 24: *resv = SWIG_Matlab_SetConstant(module_ns,"iQ",SWIG_From_int(static_cast< int >(CoolProp::iQ)));; break;
  case 25: *resv = SWIG_Matlab_SetConstant(module_ns,"iTau",SWIG_From_int(static_cast< int >(CoolProp::iTau)));; break;
  case 26: *resv = SWIG_Matlab_SetConstant(module_ns,"iDelta",SWIG_From_int(static_cast< int >(CoolProp::iDelta)));; break;
  case 27: *resv = SWIG_Matlab_SetConstant(module_ns,"iDmolar",SWIG_From_int(static_cast< int >(CoolProp::iDmolar)));; break;
  case 28: *resv = SWIG_Matlab_SetConstant(module_ns,"iHmolar",SWIG_From_int(static_cast< int >(CoolProp::iHmolar)));; break;
  case 29: *resv = SWIG_Matlab_SetConstant(module_ns,"iSmolar",SWIG_From_int(static_cast< int >(CoolProp::iSmolar)));; break;
  case 30: *resv = SWIG_Matlab_SetConstant(module_ns,"iCpmolar",SWIG_From_int(static_cast< int >(CoolProp::iCpmolar)));; break;
  case 31: *resv = SWIG_Matlab_SetConstant(module_ns,"iCp0molar",SWIG_From_int(static_cast< int >(CoolProp::iCp0molar)));; break;
  case 32: *resv = SWIG_Matlab_SetConstant(module_ns,"iCvmolar",SWIG_From_int(static_cast< int >(CoolProp::iCvmolar)));; break;
  case 33: *resv = SWIG_Matlab_SetConstant(module_ns,"iUmolar",SWIG_From_int(static_cast< int >(CoolProp::iUmolar)));; break;
  case 34: *resv = SWIG_Matlab_SetConstant(module_ns,"iGmolar",SWIG_From_int(static_cast< int >(CoolProp::iGmolar)));; break;
  case 35: *resv = SWIG_Matlab_SetConstant(module_ns,"iSmolar_residual",SWIG_From_int(static_cast< int >(CoolProp::iSmolar_residual)));; break;
  case 36: *resv = SWIG_Matlab_SetConstant(module_ns,"iDmass",SWIG_From_int(static_cast< int >(CoolProp::iDmass)));; break;
  case 37: *resv = SWIG_Matlab_SetConstant(module_ns,"iHmass",SWIG_From_int(static_cast< int >(CoolProp::iHmass)));; break;
  case 38: *resv = SWIG_Matlab_SetConstant(module_ns,"iSmass",SWIG_From_int(static_cast< int >(CoolProp::iSmass)));; break;
  case 39: *resv = SWIG_Matlab_SetConstant(module_ns,"iCpmass",SWIG_From_int(static_cast< int >(CoolProp::iCpmass)));; break;
  case 40: *resv = SWIG_Matlab_SetConstant(module_ns,"iCp0mass",SWIG_From_int(static_cast< int >(CoolProp::iCp0mass)));; break;
  case 41: *resv = SWIG_Matlab_SetConstant(module_ns,"iCvmass",SWIG_From_int(static_cast< int >(CoolProp::iCvmass)));; break;
  case 42: *resv = SWIG_Matlab_SetConstant(module_ns,"iUmass",SWIG_From_int(static_cast< int >(CoolProp::iUmass)));; break;
  case 43: *resv = SWIG_Matlab_SetConstant(module_ns,"iGmass",SWIG_From_int(static_cast< int >(CoolProp::iGmass)));; break;
  case 44: *resv = SWIG_Matlab_SetConstant(module_ns,"iviscosity",SWIG_From_int(static_cast< int >(CoolProp::iviscosity)));; break;
  case 45: *resv = SWIG_Matlab_SetConstant(module_ns,"iconductivity",SWIG_From_int(static_cast< int >(CoolProp::iconductivity)));; break;
  case 46: *resv = SWIG_Matlab_SetConstant(module_ns,"isurface_tension",SWIG_From_int(static_cast< int >(CoolProp::isurface_tension)));; break;
  case 47: *resv = SWIG_Matlab_SetConstant(module_ns,"iPrandtl",SWIG_From_int(static_cast< int >(CoolProp::iPrandtl)));; break;
  case 48: *resv = SWIG_Matlab_SetConstant(module_ns,"ispeed_sound",SWIG_From_int(static_cast< int >(CoolProp::ispeed_sound)));; break;
  case 49: *resv = SWIG_Matlab_SetConstant(module_ns,"iisothermal_compressibility",SWIG_From_int(static_cast< int >(CoolProp::iisothermal_compressibility)));; break;
  case 50: *resv = SWIG_Matlab_SetConstant(module_ns,"iisobaric_expansion_coefficient",SWIG_From_int(static_cast< int >(CoolProp::iisobaric_expansion_coefficient)));; break;
  case 51: *resv = SWIG_Matlab_SetConstant(module_ns,"ifundamental_derivative_of_gas_dynamics",SWIG_From_int(static_cast< int >(CoolProp::ifundamental_derivative_of_gas_dynamics)));; break;
  case 52: *resv = SWIG_Matlab_SetConstant(module_ns,"ialphar",SWIG_From_int(static_cast< int >(CoolProp::ialphar)));; break;
  case 53: *resv = SWIG_Matlab_SetConstant(module_ns,"idalphar_dtau_constdelta",SWIG_From_int(static_cast< int >(CoolProp::idalphar_dtau_constdelta)));; break;
  case 54: *resv = SWIG_Matlab_SetConstant(module_ns,"idalphar_ddelta_consttau",SWIG_From_int(static_cast< int >(CoolProp::idalphar_ddelta_consttau)));; break;
  case 55: *resv = SWIG_Matlab_SetConstant(module_ns,"ialpha0",SWIG_From_int(static_cast< int >(CoolProp::ialpha0)));; break;
  case 56: *resv = SWIG_Matlab_SetConstant(module_ns,"idalpha0_dtau_constdelta",SWIG_From_int(static_cast< int >(CoolProp::idalpha0_dtau_constdelta)));; break;
  case 57: *resv = SWIG_Matlab_SetConstant(module_ns,"idalpha0_ddelta_consttau",SWIG_From_int(static_cast< int >(CoolProp::idalpha0_ddelta_consttau)));; break;
  case 58: *resv = SWIG_Matlab_SetConstant(module_ns,"iBvirial",SWIG_From_int(static_cast< int >(CoolProp::iBvirial)));; break;
  case 59: *resv = SWIG_Matlab_SetConstant(module_ns,"iCvirial",SWIG_From_int(static_cast< int >(CoolProp::iCvirial)));; break;
  case 60: *resv = SWIG_Matlab_SetConstant(module_ns,"idBvirial_dT",SWIG_From_int(static_cast< int >(CoolProp::idBvirial_dT)));; break;
  case 61: *resv = SWIG_Matlab_SetConstant(module_ns,"idCvirial_dT",SWIG_From_int(static_cast< int >(CoolProp::idCvirial_dT)));; break;
  case 62: *resv = SWIG_Matlab_SetConstant(module_ns,"iZ",SWIG_From_int(static_cast< int >(CoolProp::iZ)));; break;
  case 63: *resv = SWIG_Matlab_SetConstant(module_ns,"iPIP",SWIG_From_int(static_cast< int >(CoolProp::iPIP)));; break;
  case 64: *resv = SWIG_Matlab_SetConstant(module_ns,"ifraction_min",SWIG_From_int(static_cast< int >(CoolProp::ifraction_min)));; break;
  case 65: *resv = SWIG_Matlab_SetConstant(module_ns,"ifraction_max",SWIG_From_int(static_cast< int >(CoolProp::ifraction_max)));; break;
  case 66: *resv = SWIG_Matlab_SetConstant(module_ns,"iT_freeze",SWIG_From_int(static_cast< int >(CoolProp::iT_freeze)));; break;
  case 67: *resv = SWIG_Matlab_SetConstant(module_ns,"iGWP20",SWIG_From_int(static_cast< int >(CoolProp::iGWP20)));; break;
  case 68: *resv = SWIG_Matlab_SetConstant(module_ns,"iGWP100",SWIG_From_int(static_cast< int >(CoolProp::iGWP100)));; break;
  case 69: *resv = SWIG_Matlab_SetConstant(module_ns,"iGWP500",SWIG_From_int(static_cast< int >(CoolProp::iGWP500)));; break;
  case 70: *resv = SWIG_Matlab_SetConstant(module_ns,"iFH",SWIG_From_int(static_cast< int >(CoolProp::iFH)));; break;
  case 71: *resv = SWIG_Matlab_SetConstant(module_ns,"iHH",SWIG_From_int(static_cast< int >(CoolProp::iHH)));; break;
  case 72: *resv = SWIG_Matlab_SetConstant(module_ns,"iPH",SWIG_From_int(static_cast< int >(CoolProp::iPH)));; break;
  case 73: *resv = SWIG_Matlab_SetConstant(module_ns,"iODP",SWIG_From_int(static_cast< int >(CoolProp::iODP)));; break;
  case 74: *resv = SWIG_Matlab_SetConstant(module_ns,"iPhase",SWIG_From_int(static_cast< int >(CoolProp::iPhase)));; break;
  case 75: *resv = SWIG_Matlab_SetConstant(module_ns,"iundefined_parameter",SWIG_From_int(static_cast< int >(CoolProp::iundefined_parameter)));; break;
  case 76: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_liquid",SWIG_From_int(static_cast< int >(CoolProp::iphase_liquid)));; break;
  case 77: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_supercritical",SWIG_From_int(static_cast< int >(CoolProp::iphase_supercritical)));; break;
  case 78: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_supercritical_gas",SWIG_From_int(static_cast< int >(CoolProp::iphase_supercritical_gas)));; break;
  case 79: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_supercritical_liquid",SWIG_From_int(static_cast< int >(CoolProp::iphase_supercritical_liquid)));; break;
  case 80: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_critical_point",SWIG_From_int(static_cast< int >(CoolProp::iphase_critical_point)));; break;
  case 81: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_gas",SWIG_From_int(static_cast< int >(CoolProp::iphase_gas)));; break;
  case 82: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_twophase",SWIG_From_int(static_cast< int >(CoolProp::iphase_twophase)));; break;
  case 83: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_unknown",SWIG_From_int(static_cast< int >(CoolProp::iphase_unknown)));; break;
  case 84: *resv = SWIG_Matlab_SetConstant(module_ns,"iphase_not_imposed",SWIG_From_int(static_cast< int >(CoolProp::iphase_not_imposed)));; break;
  case 85: *resv = SWIG_Matlab_SetConstant(module_ns,"IFRAC_MASS",SWIG_From_int(static_cast< int >(CoolProp::IFRAC_MASS)));; break;
  case 86: *resv = SWIG_Matlab_SetConstant(module_ns,"IFRAC_MOLE",SWIG_From_int(static_cast< int >(CoolProp::IFRAC_MOLE)));; break;
  case 87: *resv = SWIG_Matlab_SetConstant(module_ns,"IFRAC_VOLUME",SWIG_From_int(static_cast< int >(CoolProp::IFRAC_VOLUME)));; break;
  case 88: *resv = SWIG_Matlab_SetConstant(module_ns,"IFRAC_UNDEFINED",SWIG_From_int(static_cast< int >(CoolProp::IFRAC_UNDEFINED)));; break;
  case 89: *resv = SWIG_Matlab_SetConstant(module_ns,"IFRAC_PURE",SWIG_From_int(static_cast< int >(CoolProp::IFRAC_PURE)));; break;
  case 90: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_PURE",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_PURE)));; break;
  case 91: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_PSEUDOPURE",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_PSEUDOPURE)));; break;
  case 92: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_REFPROP",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_REFPROP)));; break;
  case 93: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_INCOMPRESSIBLE_LIQUID",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_LIQUID)));; break;
  case 94: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_INCOMPRESSIBLE_SOLUTION",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_INCOMPRESSIBLE_SOLUTION)));; break;
  case 95: *resv = SWIG_Matlab_SetConstant(module_ns,"FLUID_TYPE_UNDEFINED",SWIG_From_int(static_cast< int >(CoolProp::FLUID_TYPE_UNDEFINED)));; break;
  case 96: *resv = SWIG_Matlab_SetConstant(module_ns,"INPUT_PAIR_INVALID",SWIG_From_int(static_cast< int >(CoolProp::INPUT_PAIR_INVALID)));; break;
  case 97: *resv = SWIG_Matlab_SetConstant(module_ns,"QT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::QT_INPUTS)));; break;
  case 98: *resv = SWIG_Matlab_SetConstant(module_ns,"PQ_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PQ_INPUTS)));; break;
  case 99: *resv = SWIG_Matlab_SetConstant(module_ns,"QSmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::QSmolar_INPUTS)));; break;
  case 100: *resv = SWIG_Matlab_SetConstant(module_ns,"QSmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::QSmass_INPUTS)));; break;
  case 101: *resv = SWIG_Matlab_SetConstant(module_ns,"HmolarQ_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmolarQ_INPUTS)));; break;
  case 102: *resv = SWIG_Matlab_SetConstant(module_ns,"HmassQ_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmassQ_INPUTS)));; break;
  case 103: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarQ_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarQ_INPUTS)));; break;
  case 104: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassQ_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassQ_INPUTS)));; break;
  case 105: *resv = SWIG_Matlab_SetConstant(module_ns,"PT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PT_INPUTS)));; break;
  case 106: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassT_INPUTS)));; break;
  case 107: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarT_INPUTS)));; break;
  case 108: *resv = SWIG_Matlab_SetConstant(module_ns,"HmolarT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmolarT_INPUTS)));; break;
  case 109: *resv = SWIG_Matlab_SetConstant(module_ns,"HmassT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmassT_INPUTS)));; break;
  case 110: *resv = SWIG_Matlab_SetConstant(module_ns,"SmolarT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::SmolarT_INPUTS)));; break;
  case 111: *resv = SWIG_Matlab_SetConstant(module_ns,"SmassT_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::SmassT_INPUTS)));; break;
  case 112: *resv = SWIG_Matlab_SetConstant(module_ns,"TUmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::TUmolar_INPUTS)));; break;
  case 113: *resv = SWIG_Matlab_SetConstant(module_ns,"TUmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::TUmass_INPUTS)));; break;
  case 114: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassP_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassP_INPUTS)));; break;
  case 115: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarP_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarP_INPUTS)));; break;
  case 116: *resv = SWIG_Matlab_SetConstant(module_ns,"HmassP_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmassP_INPUTS)));; break;
  case 117: *resv = SWIG_Matlab_SetConstant(module_ns,"HmolarP_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmolarP_INPUTS)));; break;
  case 118: *resv = SWIG_Matlab_SetConstant(module_ns,"PSmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PSmass_INPUTS)));; break;
  case 119: *resv = SWIG_Matlab_SetConstant(module_ns,"PSmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PSmolar_INPUTS)));; break;
  case 120: *resv = SWIG_Matlab_SetConstant(module_ns,"PUmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PUmass_INPUTS)));; break;
  case 121: *resv = SWIG_Matlab_SetConstant(module_ns,"PUmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::PUmolar_INPUTS)));; break;
  case 122: *resv = SWIG_Matlab_SetConstant(module_ns,"HmassSmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmassSmass_INPUTS)));; break;
  case 123: *resv = SWIG_Matlab_SetConstant(module_ns,"HmolarSmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::HmolarSmolar_INPUTS)));; break;
  case 124: *resv = SWIG_Matlab_SetConstant(module_ns,"SmassUmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::SmassUmass_INPUTS)));; break;
  case 125: *resv = SWIG_Matlab_SetConstant(module_ns,"SmolarUmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::SmolarUmolar_INPUTS)));; break;
  case 126: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassHmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassHmass_INPUTS)));; break;
  case 127: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarHmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarHmolar_INPUTS)));; break;
  case 128: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassSmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassSmass_INPUTS)));; break;
  case 129: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarSmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarSmolar_INPUTS)));; break;
  case 130: *resv = SWIG_Matlab_SetConstant(module_ns,"DmassUmass_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmassUmass_INPUTS)));; break;
  case 131: *resv = SWIG_Matlab_SetConstant(module_ns,"DmolarUmolar_INPUTS",SWIG_From_int(static_cast< int >(CoolProp::DmolarUmolar_INPUTS)));; break;
  case 132: *resv = SWIG_Matlab_SetConstant(module_ns,"NORMALIZE_GAS_CONSTANTS",SWIG_From_int(static_cast< int >(NORMALIZE_GAS_CONSTANTS)));; break;
  case 133: *resv = SWIG_Matlab_SetConstant(module_ns,"CRITICAL_WITHIN_1UK",SWIG_From_int(static_cast< int >(CRITICAL_WITHIN_1UK)));; break;
  case 134: *resv = SWIG_Matlab_SetConstant(module_ns,"CRITICAL_SPLINES_ENABLED",SWIG_From_int(static_cast< int >(CRITICAL_SPLINES_ENABLED)));; break;
  case 135: *resv = SWIG_Matlab_SetConstant(module_ns,"SAVE_RAW_TABLES",SWIG_From_int(static_cast< int >(SAVE_RAW_TABLES)));; break;
  case 136: *resv = SWIG_Matlab_SetConstant(module_ns,"ALTERNATIVE_TABLES_DIRECTORY",SWIG_From_int(static_cast< int >(ALTERNATIVE_TABLES_DIRECTORY)));; break;
  case 137: *resv = SWIG_Matlab_SetConstant(module_ns,"ALTERNATIVE_REFPROP_PATH",SWIG_From_int(static_cast< int >(ALTERNATIVE_REFPROP_PATH)));; break;
  case 138: *resv = SWIG_Matlab_SetConstant(module_ns,"ALTERNATIVE_REFPROP_HMX_BNC_PATH",SWIG_From_int(static_cast< int >(ALTERNATIVE_REFPROP_HMX_BNC_PATH)));; break;
  case 139: *resv = SWIG_Matlab_SetConstant(module_ns,"REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS",SWIG_From_int(static_cast< int >(REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS)));; break;
  case 140: *resv = SWIG_Matlab_SetConstant(module_ns,"REFPROP_USE_GERG",SWIG_From_int(static_cast< int >(REFPROP_USE_GERG)));; break;
  case 141: *resv = SWIG_Matlab_SetConstant(module_ns,"MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB",SWIG_From_int(static_cast< int >(MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB)));; break;
  case 142: *resv = SWIG_Matlab_SetConstant(module_ns,"DONT_CHECK_PROPERTY_LIMITS",SWIG_From_int(static_cast< int >(DONT_CHECK_PROPERTY_LIMITS)));; break;
  case 143: *resv = SWIG_Matlab_SetConstant(module_ns,"HENRYS_LAW_TO_GENERATE_VLE_GUESSES",SWIG_From_int(static_cast< int >(HENRYS_LAW_TO_GENERATE_VLE_GUESSES)));; break;
  case 144: *resv = SWIG_Matlab_SetConstant(module_ns,"PHASE_ENVELOPE_STARTING_PRESSURE_PA",SWIG_From_int(static_cast< int >(PHASE_ENVELOPE_STARTING_PRESSURE_PA)));; break;
  case 145: *resv = SWIG_Matlab_SetConstant(module_ns,"R_U_CODATA",SWIG_From_int(static_cast< int >(R_U_CODATA)));; break;
  case 146: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_NOT_DEFINED_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_NOT_DEFINED_TYPE)));; break;
  case 147: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_BOOL_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_BOOL_TYPE)));; break;
  case 148: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_DOUBLE_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_DOUBLE_TYPE)));; break;
  case 149: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_INTEGER_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_INTEGER_TYPE)));; break;
  case 150: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_STRING_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_STRING_TYPE)));; break;
  case 151: *resv = SWIG_Matlab_SetConstant(module_ns,"CONFIGURATION_ENDOFLIST_TYPE",SWIG_From_int(static_cast< int >(CONFIGURATION_ENDOFLIST_TYPE)));; break;
  default:
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","No such constant.");
    return 1;
  }
  return 0;
}

const char* swigFunctionName_(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "delete_MatlabSwigIterator";
  case 4: return "MatlabSwigIterator_value";
  case 5: return "MatlabSwigIterator_incr";
  case 6: return "MatlabSwigIterator_decr";
  case 7: return "MatlabSwigIterator_distance";
  case 8: return "MatlabSwigIterator_equal";
  case 9: return "MatlabSwigIterator_copy";
  case 10: return "MatlabSwigIterator_next";
  case 11: return "MatlabSwigIterator_previous";
  case 12: return "MatlabSwigIterator_advance";
  case 13: return "MatlabSwigIterator_isequal";
  case 14: return "MatlabSwigIterator_ne";
  case 15: return "MatlabSwigIterator_TODOincr";
  case 16: return "MatlabSwigIterator_TODOdecr";
  case 17: return "MatlabSwigIterator_plus";
  case 18: return "MatlabSwigIterator_minus";
  case 19: return "DoubleVector_pop";
  case 20: return "DoubleVector_paren";
  case 21: return "DoubleVector_paren_asgn";
  case 22: return "DoubleVector_append";
  case 23: return "DoubleVector_empty";
  case 24: return "DoubleVector_size";
  case 25: return "DoubleVector_clear";
  case 26: return "DoubleVector_swap";
  case 27: return "DoubleVector_get_allocator";
  case 28: return "DoubleVector_begin";
  case 29: return "DoubleVector_end";
  case 30: return "DoubleVector_rbegin";
  case 31: return "DoubleVector_rend";
  case 32: return "DoubleVector_pop_back";
  case 33: return "DoubleVector_erase";
  case 34: return "new_DoubleVector";
  case 35: return "DoubleVector_push_back";
  case 36: return "DoubleVector_front";
  case 37: return "DoubleVector_back";
  case 38: return "DoubleVector_assign";
  case 39: return "DoubleVector_resize";
  case 40: return "DoubleVector_insert";
  case 41: return "DoubleVector_reserve";
  case 42: return "DoubleVector_capacity";
  case 43: return "delete_DoubleVector";
  case 44: return "VectorOfDoubleVector_pop";
  case 45: return "VectorOfDoubleVector_paren";
  case 46: return "VectorOfDoubleVector_paren_asgn";
  case 47: return "VectorOfDoubleVector_append";
  case 48: return "VectorOfDoubleVector_empty";
  case 49: return "VectorOfDoubleVector_size";
  case 50: return "VectorOfDoubleVector_clear";
  case 51: return "VectorOfDoubleVector_swap";
  case 52: return "VectorOfDoubleVector_get_allocator";
  case 53: return "VectorOfDoubleVector_begin";
  case 54: return "VectorOfDoubleVector_end";
  case 55: return "VectorOfDoubleVector_rbegin";
  case 56: return "VectorOfDoubleVector_rend";
  case 57: return "VectorOfDoubleVector_pop_back";
  case 58: return "VectorOfDoubleVector_erase";
  case 59: return "new_VectorOfDoubleVector";
  case 60: return "VectorOfDoubleVector_push_back";
  case 61: return "VectorOfDoubleVector_front";
  case 62: return "VectorOfDoubleVector_back";
  case 63: return "VectorOfDoubleVector_assign";
  case 64: return "VectorOfDoubleVector_resize";
  case 65: return "VectorOfDoubleVector_insert";
  case 66: return "VectorOfDoubleVector_reserve";
  case 67: return "VectorOfDoubleVector_capacity";
  case 68: return "delete_VectorOfDoubleVector";
  case 69: return "StringVector_pop";
  case 70: return "StringVector_paren";
  case 71: return "StringVector_paren_asgn";
  case 72: return "StringVector_append";
  case 73: return "StringVector_empty";
  case 74: return "StringVector_size";
  case 75: return "StringVector_clear";
  case 76: return "StringVector_swap";
  case 77: return "StringVector_get_allocator";
  case 78: return "StringVector_begin";
  case 79: return "StringVector_end";
  case 80: return "StringVector_rbegin";
  case 81: return "StringVector_rend";
  case 82: return "StringVector_pop_back";
  case 83: return "StringVector_erase";
  case 84: return "new_StringVector";
  case 85: return "StringVector_push_back";
  case 86: return "StringVector_front";
  case 87: return "StringVector_back";
  case 88: return "StringVector_assign";
  case 89: return "StringVector_resize";
  case 90: return "StringVector_insert";
  case 91: return "StringVector_reserve";
  case 92: return "StringVector_capacity";
  case 93: return "delete_StringVector";
  case 94: return "VectorOfStringVector_pop";
  case 95: return "VectorOfStringVector_paren";
  case 96: return "VectorOfStringVector_paren_asgn";
  case 97: return "VectorOfStringVector_append";
  case 98: return "VectorOfStringVector_empty";
  case 99: return "VectorOfStringVector_size";
  case 100: return "VectorOfStringVector_clear";
  case 101: return "VectorOfStringVector_swap";
  case 102: return "VectorOfStringVector_get_allocator";
  case 103: return "VectorOfStringVector_begin";
  case 104: return "VectorOfStringVector_end";
  case 105: return "VectorOfStringVector_rbegin";
  case 106: return "VectorOfStringVector_rend";
  case 107: return "VectorOfStringVector_pop_back";
  case 108: return "VectorOfStringVector_erase";
  case 109: return "new_VectorOfStringVector";
  case 110: return "VectorOfStringVector_push_back";
  case 111: return "VectorOfStringVector_front";
  case 112: return "VectorOfStringVector_back";
  case 113: return "VectorOfStringVector_assign";
  case 114: return "VectorOfStringVector_resize";
  case 115: return "VectorOfStringVector_insert";
  case 116: return "VectorOfStringVector_reserve";
  case 117: return "VectorOfStringVector_capacity";
  case 118: return "delete_VectorOfStringVector";
  case 119: return "SimpleState_rhomolar_get";
  case 120: return "SimpleState_rhomolar_set";
  case 121: return "SimpleState_T_get";
  case 122: return "SimpleState_T_set";
  case 123: return "SimpleState_p_get";
  case 124: return "SimpleState_p_set";
  case 125: return "SimpleState_hmolar_get";
  case 126: return "SimpleState_hmolar_set";
  case 127: return "SimpleState_smolar_get";
  case 128: return "SimpleState_smolar_set";
  case 129: return "SimpleState_umolar_get";
  case 130: return "SimpleState_umolar_set";
  case 131: return "SimpleState_Q_get";
  case 132: return "SimpleState_Q_set";
  case 133: return "new_SimpleState";
  case 134: return "SimpleState_fill";
  case 135: return "SimpleState_is_valid";
  case 136: return "delete_SimpleState";
  case 137: return "CriticalState_stable_get";
  case 138: return "CriticalState_stable_set";
  case 139: return "new_CriticalState";
  case 140: return "delete_CriticalState";
  case 141: return "SsatSimpleState_exists_get";
  case 142: return "SsatSimpleState_exists_set";
  case 143: return "new_SsatSimpleState";
  case 144: return "delete_SsatSimpleState";
  case 145: return "_wrap_get_parameter_information";
  case 146: return "_wrap_get_parameter_index";
  case 147: return "_wrap_get_phase_index";
  case 148: return "_wrap_is_trivial_parameter";
  case 149: return "_wrap_is_valid_parameter";
  case 150: return "_wrap_is_valid_first_derivative";
  case 151: return "_wrap_is_valid_first_saturation_derivative";
  case 152: return "_wrap_is_valid_second_derivative";
  case 153: return "_wrap_get_csv_parameter_list";
  case 154: return "_wrap_match_pair";
  case 155: return "_wrap_get_input_pair_index";
  case 156: return "_wrap_get_input_pair_short_desc";
  case 157: return "_wrap_get_input_pair_long_desc";
  case 158: return "_wrap_split_input_pair";
  case 159: return "_wrap_get_mixture_binary_pair_data";
  case 160: return "_wrap_set_mixture_binary_pair_data";
  case 161: return "GuessesStructure_T_get";
  case 162: return "GuessesStructure_T_set";
  case 163: return "GuessesStructure_p_get";
  case 164: return "GuessesStructure_p_set";
  case 165: return "GuessesStructure_rhomolar_get";
  case 166: return "GuessesStructure_rhomolar_set";
  case 167: return "GuessesStructure_hmolar_get";
  case 168: return "GuessesStructure_hmolar_set";
  case 169: return "GuessesStructure_smolar_get";
  case 170: return "GuessesStructure_smolar_set";
  case 171: return "GuessesStructure_rhomolar_liq_get";
  case 172: return "GuessesStructure_rhomolar_liq_set";
  case 173: return "GuessesStructure_rhomolar_vap_get";
  case 174: return "GuessesStructure_rhomolar_vap_set";
  case 175: return "GuessesStructure_x_get";
  case 176: return "GuessesStructure_x_set";
  case 177: return "GuessesStructure_y_get";
  case 178: return "GuessesStructure_y_set";
  case 179: return "new_GuessesStructure";
  case 180: return "delete_GuessesStructure";
  case 181: return "delete_AbstractState";
  case 182: return "AbstractState_factory";
  case 183: return "AbstractState_set_T";
  case 184: return "AbstractState_backend_name";
  case 185: return "AbstractState_using_mole_fractions";
  case 186: return "AbstractState_using_mass_fractions";
  case 187: return "AbstractState_using_volu_fractions";
  case 188: return "AbstractState_set_mole_fractions";
  case 189: return "AbstractState_set_mass_fractions";
  case 190: return "AbstractState_set_volu_fractions";
  case 191: return "AbstractState_mole_fractions_liquid";
  case 192: return "AbstractState_mole_fractions_vapor";
  case 193: return "AbstractState_get_mole_fractions";
  case 194: return "AbstractState_get_mass_fractions";
  case 195: return "AbstractState_update";
  case 196: return "AbstractState_update_with_guesses";
  case 197: return "AbstractState_available_in_high_level";
  case 198: return "AbstractState_fluid_param_string";
  case 199: return "AbstractState_fluid_names";
  case 200: return "AbstractState_set_binary_interaction_double";
  case 201: return "AbstractState_set_binary_interaction_string";
  case 202: return "AbstractState_get_binary_interaction_double";
  case 203: return "AbstractState_get_binary_interaction_string";
  case 204: return "AbstractState_apply_simple_mixing_rule";
  case 205: return "AbstractState_clear";
  case 206: return "AbstractState_get_reducing_state";
  case 207: return "AbstractState_get_state";
  case 208: return "AbstractState_Tmin";
  case 209: return "AbstractState_Tmax";
  case 210: return "AbstractState_pmax";
  case 211: return "AbstractState_Ttriple";
  case 212: return "AbstractState_phase";
  case 213: return "AbstractState_specify_phase";
  case 214: return "AbstractState_unspecify_phase";
  case 215: return "AbstractState_T_critical";
  case 216: return "AbstractState_p_critical";
  case 217: return "AbstractState_rhomolar_critical";
  case 218: return "AbstractState_rhomass_critical";
  case 219: return "AbstractState_all_critical_points";
  case 220: return "AbstractState_criticality_contour_values";
  case 221: return "AbstractState_tangent_plane_distance";
  case 222: return "AbstractState_T_reducing";
  case 223: return "AbstractState_rhomolar_reducing";
  case 224: return "AbstractState_rhomass_reducing";
  case 225: return "AbstractState_p_triple";
  case 226: return "AbstractState_name";
  case 227: return "AbstractState_dipole_moment";
  case 228: return "AbstractState_keyed_output";
  case 229: return "AbstractState_trivial_keyed_output";
  case 230: return "AbstractState_saturated_liquid_keyed_output";
  case 231: return "AbstractState_saturated_vapor_keyed_output";
  case 232: return "AbstractState_T";
  case 233: return "AbstractState_rhomolar";
  case 234: return "AbstractState_rhomass";
  case 235: return "AbstractState_p";
  case 236: return "AbstractState_Q";
  case 237: return "AbstractState_tau";
  case 238: return "AbstractState_delta";
  case 239: return "AbstractState_molar_mass";
  case 240: return "AbstractState_acentric_factor";
  case 241: return "AbstractState_gas_constant";
  case 242: return "AbstractState_Bvirial";
  case 243: return "AbstractState_dBvirial_dT";
  case 244: return "AbstractState_Cvirial";
  case 245: return "AbstractState_dCvirial_dT";
  case 246: return "AbstractState_compressibility_factor";
  case 247: return "AbstractState_hmolar";
  case 248: return "AbstractState_hmass";
  case 249: return "AbstractState_smolar";
  case 250: return "AbstractState_smass";
  case 251: return "AbstractState_umolar";
  case 252: return "AbstractState_umass";
  case 253: return "AbstractState_cpmolar";
  case 254: return "AbstractState_cpmass";
  case 255: return "AbstractState_cp0molar";
  case 256: return "AbstractState_cp0mass";
  case 257: return "AbstractState_cvmolar";
  case 258: return "AbstractState_cvmass";
  case 259: return "AbstractState_gibbsmolar";
  case 260: return "AbstractState_gibbsmass";
  case 261: return "AbstractState_speed_sound";
  case 262: return "AbstractState_isothermal_compressibility";
  case 263: return "AbstractState_isobaric_expansion_coefficient";
  case 264: return "AbstractState_fugacity_coefficient";
  case 265: return "AbstractState_fugacity";
  case 266: return "AbstractState_chemical_potential";
  case 267: return "AbstractState_PIP";
  case 268: return "AbstractState_true_critical_point";
  case 269: return "AbstractState_ideal_curve";
  case 270: return "AbstractState_first_partial_deriv";
  case 271: return "AbstractState_second_partial_deriv";
  case 272: return "AbstractState_first_saturation_deriv";
  case 273: return "AbstractState_second_saturation_deriv";
  case 274: return "AbstractState_first_two_phase_deriv";
  case 275: return "AbstractState_second_two_phase_deriv";
  case 276: return "AbstractState_first_two_phase_deriv_splined";
  case 277: return "AbstractState_build_phase_envelope";
  case 278: return "AbstractState_get_phase_envelope_data";
  case 279: return "AbstractState_has_melting_line";
  case 280: return "AbstractState_melting_line";
  case 281: return "AbstractState_saturation_ancillary";
  case 282: return "AbstractState_viscosity";
  case 283: return "AbstractState_viscosity_contributions";
  case 284: return "AbstractState_conductivity";
  case 285: return "AbstractState_conductivity_contributions";
  case 286: return "AbstractState_surface_tension";
  case 287: return "AbstractState_Prandtl";
  case 288: return "AbstractState_conformal_state";
  case 289: return "AbstractState_change_EOS";
  case 290: return "AbstractState_alpha0";
  case 291: return "AbstractState_dalpha0_dDelta";
  case 292: return "AbstractState_dalpha0_dTau";
  case 293: return "AbstractState_d2alpha0_dDelta2";
  case 294: return "AbstractState_d2alpha0_dDelta_dTau";
  case 295: return "AbstractState_d2alpha0_dTau2";
  case 296: return "AbstractState_d3alpha0_dTau3";
  case 297: return "AbstractState_d3alpha0_dDelta_dTau2";
  case 298: return "AbstractState_d3alpha0_dDelta2_dTau";
  case 299: return "AbstractState_d3alpha0_dDelta3";
  case 300: return "AbstractState_alphar";
  case 301: return "AbstractState_dalphar_dDelta";
  case 302: return "AbstractState_dalphar_dTau";
  case 303: return "AbstractState_d2alphar_dDelta2";
  case 304: return "AbstractState_d2alphar_dDelta_dTau";
  case 305: return "AbstractState_d2alphar_dTau2";
  case 306: return "AbstractState_d3alphar_dDelta3";
  case 307: return "AbstractState_d3alphar_dDelta2_dTau";
  case 308: return "AbstractState_d3alphar_dDelta_dTau2";
  case 309: return "AbstractState_d3alphar_dTau3";
  case 310: return "AbstractState_d4alphar_dDelta4";
  case 311: return "AbstractState_d4alphar_dDelta3_dTau";
  case 312: return "AbstractState_d4alphar_dDelta2_dTau2";
  case 313: return "AbstractState_d4alphar_dDelta_dTau3";
  case 314: return "AbstractState_d4alphar_dTau4";
  case 315: return "_wrap_Props1SI";
  case 316: return "_wrap_PropsSI";
  case 317: return "_wrap_PropsSImulti";
  case 318: return "_wrap_get_debug_level";
  case 319: return "_wrap_set_debug_level";
  case 320: return "_wrap_set_error_string";
  case 321: return "_wrap_set_warning_string";
  case 322: return "_wrap_saturation_ancillary";
  case 323: return "_wrap_get_global_param_string";
  case 324: return "_wrap_get_fluid_param_string";
  case 325: return "_wrap_is_valid_fluid_string";
  case 326: return "_wrap_add_fluids_as_JSON";
  case 327: return "_wrap_set_reference_stateS";
  case 328: return "_wrap_set_reference_stateD";
  case 329: return "_wrap_PhaseSI";
  case 330: return "_wrap_extract_backend";
  case 331: return "_wrap_extract_fractions";
  case 332: return "PhaseEnvelopeData_TypeI_get";
  case 333: return "PhaseEnvelopeData_TypeI_set";
  case 334: return "PhaseEnvelopeData_built_get";
  case 335: return "PhaseEnvelopeData_built_set";
  case 336: return "PhaseEnvelopeData_iTsat_max_get";
  case 337: return "PhaseEnvelopeData_iTsat_max_set";
  case 338: return "PhaseEnvelopeData_ipsat_max_get";
  case 339: return "PhaseEnvelopeData_ipsat_max_set";
  case 340: return "PhaseEnvelopeData_icrit_get";
  case 341: return "PhaseEnvelopeData_icrit_set";
  case 342: return "PhaseEnvelopeData_T_get";
  case 343: return "PhaseEnvelopeData_T_set";
  case 344: return "PhaseEnvelopeData_p_get";
  case 345: return "PhaseEnvelopeData_p_set";
  case 346: return "PhaseEnvelopeData_lnT_get";
  case 347: return "PhaseEnvelopeData_lnT_set";
  case 348: return "PhaseEnvelopeData_lnp_get";
  case 349: return "PhaseEnvelopeData_lnp_set";
  case 350: return "PhaseEnvelopeData_rhomolar_liq_get";
  case 351: return "PhaseEnvelopeData_rhomolar_liq_set";
  case 352: return "PhaseEnvelopeData_rhomolar_vap_get";
  case 353: return "PhaseEnvelopeData_rhomolar_vap_set";
  case 354: return "PhaseEnvelopeData_lnrhomolar_liq_get";
  case 355: return "PhaseEnvelopeData_lnrhomolar_liq_set";
  case 356: return "PhaseEnvelopeData_lnrhomolar_vap_get";
  case 357: return "PhaseEnvelopeData_lnrhomolar_vap_set";
  case 358: return "PhaseEnvelopeData_hmolar_liq_get";
  case 359: return "PhaseEnvelopeData_hmolar_liq_set";
  case 360: return "PhaseEnvelopeData_hmolar_vap_get";
  case 361: return "PhaseEnvelopeData_hmolar_vap_set";
  case 362: return "PhaseEnvelopeData_smolar_liq_get";
  case 363: return "PhaseEnvelopeData_smolar_liq_set";
  case 364: return "PhaseEnvelopeData_smolar_vap_get";
  case 365: return "PhaseEnvelopeData_smolar_vap_set";
  case 366: return "PhaseEnvelopeData_Q_get";
  case 367: return "PhaseEnvelopeData_Q_set";
  case 368: return "PhaseEnvelopeData_cpmolar_liq_get";
  case 369: return "PhaseEnvelopeData_cpmolar_liq_set";
  case 370: return "PhaseEnvelopeData_cpmolar_vap_get";
  case 371: return "PhaseEnvelopeData_cpmolar_vap_set";
  case 372: return "PhaseEnvelopeData_cvmolar_liq_get";
  case 373: return "PhaseEnvelopeData_cvmolar_liq_set";
  case 374: return "PhaseEnvelopeData_cvmolar_vap_get";
  case 375: return "PhaseEnvelopeData_cvmolar_vap_set";
  case 376: return "PhaseEnvelopeData_viscosity_liq_get";
  case 377: return "PhaseEnvelopeData_viscosity_liq_set";
  case 378: return "PhaseEnvelopeData_viscosity_vap_get";
  case 379: return "PhaseEnvelopeData_viscosity_vap_set";
  case 380: return "PhaseEnvelopeData_conductivity_liq_get";
  case 381: return "PhaseEnvelopeData_conductivity_liq_set";
  case 382: return "PhaseEnvelopeData_conductivity_vap_get";
  case 383: return "PhaseEnvelopeData_conductivity_vap_set";
  case 384: return "PhaseEnvelopeData_speed_sound_vap_get";
  case 385: return "PhaseEnvelopeData_speed_sound_vap_set";
  case 386: return "PhaseEnvelopeData_K_get";
  case 387: return "PhaseEnvelopeData_K_set";
  case 388: return "PhaseEnvelopeData_lnK_get";
  case 389: return "PhaseEnvelopeData_lnK_set";
  case 390: return "PhaseEnvelopeData_x_get";
  case 391: return "PhaseEnvelopeData_x_set";
  case 392: return "PhaseEnvelopeData_y_get";
  case 393: return "PhaseEnvelopeData_y_set";
  case 394: return "new_PhaseEnvelopeData";
  case 395: return "PhaseEnvelopeData_resize";
  case 396: return "PhaseEnvelopeData_clear";
  case 397: return "PhaseEnvelopeData_insert_variables";
  case 398: return "PhaseEnvelopeData_store_variables";
  case 399: return "delete_PhaseEnvelopeData";
  case 400: return "_wrap_config_key_to_string";
  case 401: return "_wrap_config_key_description";
  case 402: return "new_ConfigurationItem";
  case 403: return "ConfigurationItem_set_bool";
  case 404: return "ConfigurationItem_set_integer";
  case 405: return "ConfigurationItem_set_double";
  case 406: return "ConfigurationItem_set_string";
  case 407: return "ConfigurationItem_get_key";
  case 408: return "delete_ConfigurationItem";
  case 409: return "new_Configuration";
  case 410: return "delete_Configuration";
  case 411: return "Configuration_get_item";
  case 412: return "Configuration_add_item";
  case 413: return "Configuration_get_items";
  case 414: return "Configuration_set_defaults";
  case 415: return "_wrap_get_config_bool";
  case 416: return "_wrap_get_config_double";
  case 417: return "_wrap_get_config_string";
  case 418: return "_wrap_get_config_as_json_string";
  case 419: return "_wrap_set_config_bool";
  case 420: return "_wrap_set_config_double";
  case 421: return "_wrap_set_config_string";
  case 422: return "_wrap_set_config_as_json_string";
  case 423: return "_wrap_HAPropsSI";
  case 424: return "_wrap_HAProps";
  case 425: return "_wrap_HAProps_Aux";
  case 426: return "_wrap_IceProps";
  case 427: return "_wrap_UseVirialCorrelations";
  case 428: return "_wrap_UseIsothermCompressCorrelation";
  case 429: return "_wrap_UseIdealGasEnthalpyCorrelations";
  case 430: return "_wrap_HAHelp";
  case 431: return "_wrap_returnHumAirCode";
  case 432: return "_wrap_cair_sat";
  default: return 0;
  }
}

int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = swigFunctionName_(fcn_id);
  if (s==0) {
    mexWarnMsgIdAndTxt("SWIG:RuntimeError", "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  if (!is_loaded) {
    SWIG_Matlab_LoadModule(SWIG_name_d);
    is_loaded=true;
    mxArray *err;
    mexEvalString("CoolPropsetup");
    mexAtExit(SWIG_Matlab_ExitFcn);
  }
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int id_exists=1, flag;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=_wrap_delete_MatlabSwigIterator(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=_wrap_MatlabSwigIterator_value(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_MatlabSwigIterator_incr(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_MatlabSwigIterator_decr(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_MatlabSwigIterator_distance(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_MatlabSwigIterator_equal(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_MatlabSwigIterator_copy(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_MatlabSwigIterator_next(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_MatlabSwigIterator_previous(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_MatlabSwigIterator_advance(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_MatlabSwigIterator_isequal(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_MatlabSwigIterator_ne(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_MatlabSwigIterator_TODOincr(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_MatlabSwigIterator_TODOdecr(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_MatlabSwigIterator_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_MatlabSwigIterator_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_DoubleVector_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_DoubleVector_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_DoubleVector_paren_asgn(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_DoubleVector_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_DoubleVector_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_DoubleVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_DoubleVector_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_DoubleVector_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_DoubleVector_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_DoubleVector_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_DoubleVector_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_DoubleVector_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_DoubleVector_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_DoubleVector_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_DoubleVector_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_new_DoubleVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_DoubleVector_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_DoubleVector_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_DoubleVector_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_DoubleVector_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_DoubleVector_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_DoubleVector_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_DoubleVector_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_DoubleVector_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_delete_DoubleVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_VectorOfDoubleVector_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_VectorOfDoubleVector_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_VectorOfDoubleVector_paren_asgn(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_VectorOfDoubleVector_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_VectorOfDoubleVector_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_VectorOfDoubleVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_VectorOfDoubleVector_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_VectorOfDoubleVector_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_VectorOfDoubleVector_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_VectorOfDoubleVector_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_VectorOfDoubleVector_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_VectorOfDoubleVector_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_VectorOfDoubleVector_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_VectorOfDoubleVector_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_VectorOfDoubleVector_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_new_VectorOfDoubleVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_VectorOfDoubleVector_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_VectorOfDoubleVector_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_VectorOfDoubleVector_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_VectorOfDoubleVector_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_VectorOfDoubleVector_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_VectorOfDoubleVector_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_VectorOfDoubleVector_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_VectorOfDoubleVector_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_delete_VectorOfDoubleVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_StringVector_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_StringVector_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_StringVector_paren_asgn(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_StringVector_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_StringVector_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_StringVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_StringVector_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_StringVector_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_StringVector_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_StringVector_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_StringVector_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_StringVector_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_StringVector_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_StringVector_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_StringVector_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_new_StringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_StringVector_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_StringVector_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_StringVector_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_StringVector_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_StringVector_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_StringVector_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_StringVector_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_StringVector_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_delete_StringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_VectorOfStringVector_pop(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_VectorOfStringVector_paren(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_VectorOfStringVector_paren_asgn(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_VectorOfStringVector_append(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_VectorOfStringVector_empty(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_VectorOfStringVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_VectorOfStringVector_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_VectorOfStringVector_swap(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_VectorOfStringVector_get_allocator(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_VectorOfStringVector_begin(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_VectorOfStringVector_end(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_VectorOfStringVector_rbegin(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_VectorOfStringVector_rend(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_VectorOfStringVector_pop_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_VectorOfStringVector_erase(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_new_VectorOfStringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_VectorOfStringVector_push_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_VectorOfStringVector_front(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_VectorOfStringVector_back(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_VectorOfStringVector_assign(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_VectorOfStringVector_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_VectorOfStringVector_insert(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_VectorOfStringVector_reserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_VectorOfStringVector_capacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_delete_VectorOfStringVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_SimpleState_rhomolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_SimpleState_rhomolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_SimpleState_T_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_SimpleState_T_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_SimpleState_p_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_SimpleState_p_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_SimpleState_hmolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_SimpleState_hmolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_SimpleState_smolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_SimpleState_smolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_SimpleState_umolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_SimpleState_umolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_SimpleState_Q_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_SimpleState_Q_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_new_SimpleState(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_SimpleState_fill(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_SimpleState_is_valid(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_delete_SimpleState(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_CriticalState_stable_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_CriticalState_stable_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_new_CriticalState(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_delete_CriticalState(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_SsatSimpleState_exists_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_SsatSimpleState_exists_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_new_SsatSimpleState(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_delete_SsatSimpleState(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_get_parameter_information(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_get_parameter_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_get_phase_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_is_trivial_parameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_is_valid_parameter(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_is_valid_first_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_is_valid_first_saturation_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_is_valid_second_derivative(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_get_csv_parameter_list(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_match_pair(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_get_input_pair_index(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_get_input_pair_short_desc(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_get_input_pair_long_desc(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_split_input_pair(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_get_mixture_binary_pair_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_set_mixture_binary_pair_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_GuessesStructure_T_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_GuessesStructure_T_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_GuessesStructure_p_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_GuessesStructure_p_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_GuessesStructure_rhomolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_GuessesStructure_rhomolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_GuessesStructure_hmolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_GuessesStructure_hmolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_GuessesStructure_smolar_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_GuessesStructure_smolar_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_GuessesStructure_rhomolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_GuessesStructure_rhomolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_GuessesStructure_rhomolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_GuessesStructure_rhomolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_GuessesStructure_x_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_GuessesStructure_x_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_GuessesStructure_y_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_GuessesStructure_y_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_new_GuessesStructure(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_delete_GuessesStructure(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_delete_AbstractState(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_AbstractState_factory(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_AbstractState_set_T(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_AbstractState_backend_name(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_AbstractState_using_mole_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_AbstractState_using_mass_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_AbstractState_using_volu_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_AbstractState_set_mole_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_AbstractState_set_mass_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_AbstractState_set_volu_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_AbstractState_mole_fractions_liquid(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_AbstractState_mole_fractions_vapor(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_AbstractState_get_mole_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_AbstractState_get_mass_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_AbstractState_update(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_AbstractState_update_with_guesses(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_AbstractState_available_in_high_level(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_AbstractState_fluid_param_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_AbstractState_fluid_names(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_AbstractState_set_binary_interaction_double(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_AbstractState_set_binary_interaction_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_AbstractState_get_binary_interaction_double(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_AbstractState_get_binary_interaction_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_AbstractState_apply_simple_mixing_rule(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_AbstractState_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_AbstractState_get_reducing_state(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_AbstractState_get_state(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_AbstractState_Tmin(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_AbstractState_Tmax(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_AbstractState_pmax(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_AbstractState_Ttriple(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_AbstractState_phase(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_AbstractState_specify_phase(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_AbstractState_unspecify_phase(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_AbstractState_T_critical(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_AbstractState_p_critical(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_AbstractState_rhomolar_critical(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_AbstractState_rhomass_critical(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_AbstractState_all_critical_points(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_AbstractState_criticality_contour_values(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_AbstractState_tangent_plane_distance(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_AbstractState_T_reducing(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_AbstractState_rhomolar_reducing(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_AbstractState_rhomass_reducing(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_AbstractState_p_triple(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_AbstractState_name(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_AbstractState_dipole_moment(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_AbstractState_keyed_output(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_AbstractState_trivial_keyed_output(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_AbstractState_saturated_liquid_keyed_output(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_AbstractState_saturated_vapor_keyed_output(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_AbstractState_T(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_AbstractState_rhomolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_AbstractState_rhomass(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_AbstractState_p(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_AbstractState_Q(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_AbstractState_tau(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_AbstractState_delta(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_AbstractState_molar_mass(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_AbstractState_acentric_factor(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_AbstractState_gas_constant(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_AbstractState_Bvirial(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_AbstractState_dBvirial_dT(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_AbstractState_Cvirial(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_AbstractState_dCvirial_dT(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_AbstractState_compressibility_factor(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_AbstractState_hmolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_AbstractState_hmass(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_AbstractState_smolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_AbstractState_smass(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_AbstractState_umolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_AbstractState_umass(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_AbstractState_cpmolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_AbstractState_cpmass(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_AbstractState_cp0molar(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_AbstractState_cp0mass(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_AbstractState_cvmolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_AbstractState_cvmass(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_AbstractState_gibbsmolar(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_AbstractState_gibbsmass(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_AbstractState_speed_sound(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_AbstractState_isothermal_compressibility(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_AbstractState_isobaric_expansion_coefficient(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_AbstractState_fugacity_coefficient(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_AbstractState_fugacity(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_AbstractState_chemical_potential(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_AbstractState_PIP(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_AbstractState_true_critical_point(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_AbstractState_ideal_curve(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_AbstractState_first_partial_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_AbstractState_second_partial_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_AbstractState_first_saturation_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_AbstractState_second_saturation_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_AbstractState_first_two_phase_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_AbstractState_second_two_phase_deriv(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_AbstractState_first_two_phase_deriv_splined(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_AbstractState_build_phase_envelope(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_AbstractState_get_phase_envelope_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_AbstractState_has_melting_line(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_AbstractState_melting_line(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_AbstractState_saturation_ancillary(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_AbstractState_viscosity(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_AbstractState_viscosity_contributions(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_AbstractState_conductivity(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_AbstractState_conductivity_contributions(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_AbstractState_surface_tension(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_AbstractState_Prandtl(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_AbstractState_conformal_state(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_AbstractState_change_EOS(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_AbstractState_alpha0(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_AbstractState_dalpha0_dDelta(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_AbstractState_dalpha0_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_AbstractState_d2alpha0_dDelta2(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_AbstractState_d2alpha0_dDelta_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_AbstractState_d2alpha0_dTau2(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_AbstractState_d3alpha0_dTau3(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_AbstractState_d3alpha0_dDelta_dTau2(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_AbstractState_d3alpha0_dDelta2_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_AbstractState_d3alpha0_dDelta3(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_AbstractState_alphar(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_AbstractState_dalphar_dDelta(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_AbstractState_dalphar_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_AbstractState_d2alphar_dDelta2(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_AbstractState_d2alphar_dDelta_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_AbstractState_d2alphar_dTau2(resc,resv,argc,(mxArray**)(argv)); break;
  case 306: flag=_wrap_AbstractState_d3alphar_dDelta3(resc,resv,argc,(mxArray**)(argv)); break;
  case 307: flag=_wrap_AbstractState_d3alphar_dDelta2_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 308: flag=_wrap_AbstractState_d3alphar_dDelta_dTau2(resc,resv,argc,(mxArray**)(argv)); break;
  case 309: flag=_wrap_AbstractState_d3alphar_dTau3(resc,resv,argc,(mxArray**)(argv)); break;
  case 310: flag=_wrap_AbstractState_d4alphar_dDelta4(resc,resv,argc,(mxArray**)(argv)); break;
  case 311: flag=_wrap_AbstractState_d4alphar_dDelta3_dTau(resc,resv,argc,(mxArray**)(argv)); break;
  case 312: flag=_wrap_AbstractState_d4alphar_dDelta2_dTau2(resc,resv,argc,(mxArray**)(argv)); break;
  case 313: flag=_wrap_AbstractState_d4alphar_dDelta_dTau3(resc,resv,argc,(mxArray**)(argv)); break;
  case 314: flag=_wrap_AbstractState_d4alphar_dTau4(resc,resv,argc,(mxArray**)(argv)); break;
  case 315: flag=_wrap_Props1SI(resc,resv,argc,(mxArray**)(argv)); break;
  case 316: flag=_wrap_PropsSI(resc,resv,argc,(mxArray**)(argv)); break;
  case 317: flag=_wrap_PropsSImulti(resc,resv,argc,(mxArray**)(argv)); break;
  case 318: flag=_wrap_get_debug_level(resc,resv,argc,(mxArray**)(argv)); break;
  case 319: flag=_wrap_set_debug_level(resc,resv,argc,(mxArray**)(argv)); break;
  case 320: flag=_wrap_set_error_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 321: flag=_wrap_set_warning_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 322: flag=_wrap_saturation_ancillary(resc,resv,argc,(mxArray**)(argv)); break;
  case 323: flag=_wrap_get_global_param_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 324: flag=_wrap_get_fluid_param_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 325: flag=_wrap_is_valid_fluid_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 326: flag=_wrap_add_fluids_as_JSON(resc,resv,argc,(mxArray**)(argv)); break;
  case 327: flag=_wrap_set_reference_stateS(resc,resv,argc,(mxArray**)(argv)); break;
  case 328: flag=_wrap_set_reference_stateD(resc,resv,argc,(mxArray**)(argv)); break;
  case 329: flag=_wrap_PhaseSI(resc,resv,argc,(mxArray**)(argv)); break;
  case 330: flag=_wrap_extract_backend(resc,resv,argc,(mxArray**)(argv)); break;
  case 331: flag=_wrap_extract_fractions(resc,resv,argc,(mxArray**)(argv)); break;
  case 332: flag=_wrap_PhaseEnvelopeData_TypeI_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 333: flag=_wrap_PhaseEnvelopeData_TypeI_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 334: flag=_wrap_PhaseEnvelopeData_built_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 335: flag=_wrap_PhaseEnvelopeData_built_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 336: flag=_wrap_PhaseEnvelopeData_iTsat_max_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 337: flag=_wrap_PhaseEnvelopeData_iTsat_max_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 338: flag=_wrap_PhaseEnvelopeData_ipsat_max_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 339: flag=_wrap_PhaseEnvelopeData_ipsat_max_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 340: flag=_wrap_PhaseEnvelopeData_icrit_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 341: flag=_wrap_PhaseEnvelopeData_icrit_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 342: flag=_wrap_PhaseEnvelopeData_T_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 343: flag=_wrap_PhaseEnvelopeData_T_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 344: flag=_wrap_PhaseEnvelopeData_p_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 345: flag=_wrap_PhaseEnvelopeData_p_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 346: flag=_wrap_PhaseEnvelopeData_lnT_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 347: flag=_wrap_PhaseEnvelopeData_lnT_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 348: flag=_wrap_PhaseEnvelopeData_lnp_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 349: flag=_wrap_PhaseEnvelopeData_lnp_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 350: flag=_wrap_PhaseEnvelopeData_rhomolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 351: flag=_wrap_PhaseEnvelopeData_rhomolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 352: flag=_wrap_PhaseEnvelopeData_rhomolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 353: flag=_wrap_PhaseEnvelopeData_rhomolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 354: flag=_wrap_PhaseEnvelopeData_lnrhomolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 355: flag=_wrap_PhaseEnvelopeData_lnrhomolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 356: flag=_wrap_PhaseEnvelopeData_lnrhomolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 357: flag=_wrap_PhaseEnvelopeData_lnrhomolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 358: flag=_wrap_PhaseEnvelopeData_hmolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 359: flag=_wrap_PhaseEnvelopeData_hmolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 360: flag=_wrap_PhaseEnvelopeData_hmolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 361: flag=_wrap_PhaseEnvelopeData_hmolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 362: flag=_wrap_PhaseEnvelopeData_smolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 363: flag=_wrap_PhaseEnvelopeData_smolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 364: flag=_wrap_PhaseEnvelopeData_smolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 365: flag=_wrap_PhaseEnvelopeData_smolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 366: flag=_wrap_PhaseEnvelopeData_Q_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 367: flag=_wrap_PhaseEnvelopeData_Q_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 368: flag=_wrap_PhaseEnvelopeData_cpmolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 369: flag=_wrap_PhaseEnvelopeData_cpmolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 370: flag=_wrap_PhaseEnvelopeData_cpmolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 371: flag=_wrap_PhaseEnvelopeData_cpmolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 372: flag=_wrap_PhaseEnvelopeData_cvmolar_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 373: flag=_wrap_PhaseEnvelopeData_cvmolar_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 374: flag=_wrap_PhaseEnvelopeData_cvmolar_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 375: flag=_wrap_PhaseEnvelopeData_cvmolar_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 376: flag=_wrap_PhaseEnvelopeData_viscosity_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 377: flag=_wrap_PhaseEnvelopeData_viscosity_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 378: flag=_wrap_PhaseEnvelopeData_viscosity_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 379: flag=_wrap_PhaseEnvelopeData_viscosity_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 380: flag=_wrap_PhaseEnvelopeData_conductivity_liq_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 381: flag=_wrap_PhaseEnvelopeData_conductivity_liq_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 382: flag=_wrap_PhaseEnvelopeData_conductivity_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 383: flag=_wrap_PhaseEnvelopeData_conductivity_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 384: flag=_wrap_PhaseEnvelopeData_speed_sound_vap_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 385: flag=_wrap_PhaseEnvelopeData_speed_sound_vap_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 386: flag=_wrap_PhaseEnvelopeData_K_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 387: flag=_wrap_PhaseEnvelopeData_K_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 388: flag=_wrap_PhaseEnvelopeData_lnK_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 389: flag=_wrap_PhaseEnvelopeData_lnK_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 390: flag=_wrap_PhaseEnvelopeData_x_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 391: flag=_wrap_PhaseEnvelopeData_x_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 392: flag=_wrap_PhaseEnvelopeData_y_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 393: flag=_wrap_PhaseEnvelopeData_y_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 394: flag=_wrap_new_PhaseEnvelopeData(resc,resv,argc,(mxArray**)(argv)); break;
  case 395: flag=_wrap_PhaseEnvelopeData_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 396: flag=_wrap_PhaseEnvelopeData_clear(resc,resv,argc,(mxArray**)(argv)); break;
  case 397: flag=_wrap_PhaseEnvelopeData_insert_variables(resc,resv,argc,(mxArray**)(argv)); break;
  case 398: flag=_wrap_PhaseEnvelopeData_store_variables(resc,resv,argc,(mxArray**)(argv)); break;
  case 399: flag=_wrap_delete_PhaseEnvelopeData(resc,resv,argc,(mxArray**)(argv)); break;
  case 400: flag=_wrap_config_key_to_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 401: flag=_wrap_config_key_description(resc,resv,argc,(mxArray**)(argv)); break;
  case 402: flag=_wrap_new_ConfigurationItem(resc,resv,argc,(mxArray**)(argv)); break;
  case 403: flag=_wrap_ConfigurationItem_set_bool(resc,resv,argc,(mxArray**)(argv)); break;
  case 404: flag=_wrap_ConfigurationItem_set_integer(resc,resv,argc,(mxArray**)(argv)); break;
  case 405: flag=_wrap_ConfigurationItem_set_double(resc,resv,argc,(mxArray**)(argv)); break;
  case 406: flag=_wrap_ConfigurationItem_set_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 407: flag=_wrap_ConfigurationItem_get_key(resc,resv,argc,(mxArray**)(argv)); break;
  case 408: flag=_wrap_delete_ConfigurationItem(resc,resv,argc,(mxArray**)(argv)); break;
  case 409: flag=_wrap_new_Configuration(resc,resv,argc,(mxArray**)(argv)); break;
  case 410: flag=_wrap_delete_Configuration(resc,resv,argc,(mxArray**)(argv)); break;
  case 411: flag=_wrap_Configuration_get_item(resc,resv,argc,(mxArray**)(argv)); break;
  case 412: flag=_wrap_Configuration_add_item(resc,resv,argc,(mxArray**)(argv)); break;
  case 413: flag=_wrap_Configuration_get_items(resc,resv,argc,(mxArray**)(argv)); break;
  case 414: flag=_wrap_Configuration_set_defaults(resc,resv,argc,(mxArray**)(argv)); break;
  case 415: flag=_wrap_get_config_bool(resc,resv,argc,(mxArray**)(argv)); break;
  case 416: flag=_wrap_get_config_double(resc,resv,argc,(mxArray**)(argv)); break;
  case 417: flag=_wrap_get_config_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 418: flag=_wrap_get_config_as_json_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 419: flag=_wrap_set_config_bool(resc,resv,argc,(mxArray**)(argv)); break;
  case 420: flag=_wrap_set_config_double(resc,resv,argc,(mxArray**)(argv)); break;
  case 421: flag=_wrap_set_config_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 422: flag=_wrap_set_config_as_json_string(resc,resv,argc,(mxArray**)(argv)); break;
  case 423: flag=_wrap_HAPropsSI(resc,resv,argc,(mxArray**)(argv)); break;
  case 424: flag=_wrap_HAProps(resc,resv,argc,(mxArray**)(argv)); break;
  case 425: flag=_wrap_HAProps_Aux(resc,resv,argc,(mxArray**)(argv)); break;
  case 426: flag=_wrap_IceProps(resc,resv,argc,(mxArray**)(argv)); break;
  case 427: flag=_wrap_UseVirialCorrelations(resc,resv,argc,(mxArray**)(argv)); break;
  case 428: flag=_wrap_UseIsothermCompressCorrelation(resc,resv,argc,(mxArray**)(argv)); break;
  case 429: flag=_wrap_UseIdealGasEnthalpyCorrelations(resc,resv,argc,(mxArray**)(argv)); break;
  case 430: flag=_wrap_HAHelp(resc,resv,argc,(mxArray**)(argv)); break;
  case 431: flag=_wrap_returnHumAirCode(resc,resv,argc,(mxArray**)(argv)); break;
  case 432: flag=_wrap_cair_sat(resc,resv,argc,(mxArray**)(argv)); break;
  default: id_exists=0;
  }
  if (!id_exists) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError","No function id %d.",fcn_id);
  }
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError","Fatal error.");
  }
}
